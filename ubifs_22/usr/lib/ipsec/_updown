#!/bin/sh
# default updown script
#
# Copyright (C) 2003-2004 Nigel Meteringham
# Copyright (C) 2003-2004 Tuomo Soini
# Copyright (C) 2002-2004 Michael Richardson
# Copyright (C) 2005-2007 Andreas Steffen <andreas.steffen@strongswan.org>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.  See <http://www.fsf.org/copyleft/gpl.txt>.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.

# Add your custom ip rules to the /etc/ipsec.user file if you need that functionality.

[ -e /etc/ipsec.user ] && . /etc/ipsec.user "$1"

#      PLUTO_VERSION
#              indicates  what  version of this interface is being
#              used.  This document describes version  1.1.   This
#              is upwardly compatible with version 1.0.
#
#       PLUTO_VERB
#              specifies the name of the operation to be performed
#              (prepare-host, prepare-client, up-host, up-client,
#              down-host, or down-client).  If the address family
#              for security gateway to security gateway communica-
#              tions is IPv6, then a suffix of -v6 is added to the
#              verb.
#
#       PLUTO_CONNECTION
#              is the name of the  connection  for  which  we  are
#              routing.
#
#       PLUTO_INTERFACE
#              is the name of the ipsec interface to be used.
#
#       PLUTO_REQID
#              is the requid of the AH|ESP policy
#
#       PLUTO_PROTO
#              is the negotiated IPsec protocol, ah|esp
#
#       PLUTO_IPCOMP
#              is not empty if IPComp was negotiated
#
#       PLUTO_UNIQUEID
#              is the unique identifier of the associated IKE_SA
#
#       PLUTO_ME
#              is the IP address of our host.
#
#       PLUTO_MY_ID
#              is the ID of our host.
#
#       PLUTO_MY_CLIENT
#              is the IP address / count of our client subnet.  If
#              the  client  is  just  the  host,  this will be the
#              host's own IP address / max (where max  is  32  for
#              IPv4 and 128 for IPv6).
#
#       PLUTO_MY_SOURCEIP
#       PLUTO_MY_SOURCEIP4_$i
#       PLUTO_MY_SOURCEIP6_$i
#              contains IPv4/IPv6 virtual IP received from a responder,
#              $i enumerates from 1 to the number of IP per address family.
#              PLUTO_MY_SOURCEIP is a legacy variable and equal to the first
#              virtual IP, IPv4 or IPv6.
#
#       PLUTO_MY_PROTOCOL
#              is the IP protocol that will be transported.
#
#       PLUTO_MY_PORT
#              is  the  UDP/TCP  port  to  which  the IPsec SA  is
#              restricted on our side.  For ICMP/ICMPv6 this contains the
#              message type, and PLUTO_PEER_PORT the message code.
#
#       PLUTO_PEER
#              is the IP address of our peer.
#
#       PLUTO_PEER_ID
#              is the ID of our peer.
#
#       PLUTO_PEER_CLIENT
#              is the IP address / count of the peer's client sub-
#              net.   If the client is just the peer, this will be
#              the peer's own IP address / max (where  max  is  32
#              for IPv4 and 128 for IPv6).
#
#       PLUTO_PEER_SOURCEIP
#       PLUTO_PEER_SOURCEIP4_$i
#       PLUTO_PEER_SOURCEIP6_$i
#              contains IPv4/IPv6 virtual IP sent to an initiator,
#              $i enumerates from 1 to the number of IP per address family.
#              PLUTO_PEER_SOURCEIP is a legacy variable and equal to the first
#              virtual IP, IPv4 or IPv6.
#
#       PLUTO_PEER_PROTOCOL
#              is the IP protocol that will be transported.
#
#       PLUTO_PEER_PORT
#              is  the  UDP/TCP  port  to  which  the IPsec SA  is
#              restricted on the peer side.  For ICMP/ICMPv6 this contains the
#              message code, and PLUTO_MY_PORT the message type.
#
#       PLUTO_XAUTH_ID
#              is an optional user ID employed by the XAUTH protocol
#
#       PLUTO_MARK_IN
#              is an optional XFRM mark set on the inbound IPsec SA
#
#       PLUTO_MARK_OUT
#              is an optional XFRM mark set on the outbound IPsec SA
#
#       PLUTO_UDP_ENC
#              contains the remote UDP port in the case of ESP_IN_UDP
#              encapsulation
#
#       PLUTO_DNS4_$i
#       PLUTO_DNS6_$i
#              contains IPv4/IPv6 DNS server attribute received from a
#              responder, $i enumerates from 1 to the number of servers per
#              address family.
#

# define a minimum PATH environment in case it is not set
PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/sbin"
export PATH

. /lib/functions/network.sh
. /lib/functions.sh

#EzVpn attributes file
EZFILE=/tmp/etc/cisco_ezvpn_attr
# comment to disable logging VPN connections to syslog
VPN_LOGGING=1
STRONGSWAN=/tmp/etc/config/strongswan
#
# tag put in front of each log entry:
TAG=vpn
#
# syslog facility and priority used:
FAC_PRIO=local0.notice
#
# to create a special vpn logging file, put the following line into
# the syslog configuration file /etc/syslog.conf:
#
# local0.notice                   -/var/log/vpn

local connName=`echo "$PLUTO_CONNECTION"`
PLUTO_CONNECTION=`echo "$PLUTO_CONNECTION"|sed 's/-[0-9][0-9]*$//g'`
PLUTO_CONNECTION=`echo "$PLUTO_CONNECTION"|sed 's/_bkp[0-9]*$//g'`

# check interface version
case "$PLUTO_VERSION" in
1.[0|1])	# Older release?!?  Play it safe, script may be using new features.
	echo "$0: obsolete interface version \`$PLUTO_VERSION'," >&2
	echo "$0: 	called by obsolete release?" >&2
	exit 2
	;;
1.*)	;;
*)	echo "$0: unknown interface version \`$PLUTO_VERSION'" >&2
	exit 2
	;;
esac

# check parameter(s)
case "$1:$*" in
':')			# no parameters
	;;
iptables:iptables)	# due to (left/right)firewall; for default script only
	;;
custom:*)		# custom parameters (see above CAUTION comment)
	;;
*)	echo "$0: unknown parameters \`$*'" >&2
	exit 2
	;;
esac

IPSEC_POLICY="-m policy --pol ipsec --proto $PLUTO_PROTO --reqid $PLUTO_REQID"
IPSEC_POLICY_IN="$IPSEC_POLICY --dir in"
IPSEC_POLICY_OUT="$IPSEC_POLICY --dir out"

# use protocol specific options to set ports
case "$PLUTO_MY_PROTOCOL" in
1)	# ICMP
	ICMP_TYPE_OPTION="--icmp-type"
	;;
58)	# ICMPv6
	ICMP_TYPE_OPTION="--icmpv6-type"
	;;
*)
	;;
esac

# are there port numbers?
if [ "$PLUTO_MY_PORT" != 0 ]
then
	if [ -n "$ICMP_TYPE_OPTION" ]
	then
		S_MY_PORT="$ICMP_TYPE_OPTION $PLUTO_MY_PORT"
		D_MY_PORT="$ICMP_TYPE_OPTION $PLUTO_MY_PORT"
	else
		S_MY_PORT="--sport $PLUTO_MY_PORT"
		D_MY_PORT="--dport $PLUTO_MY_PORT"
	fi
fi
if [ "$PLUTO_PEER_PORT" != 0 ]
then
	if [ -n "$ICMP_TYPE_OPTION" ]
	then
		# the syntax is --icmp[v6]-type type[/code], so add it to the existing option
		S_MY_PORT="$S_MY_PORT/$PLUTO_PEER_PORT"
		D_MY_PORT="$D_MY_PORT/$PLUTO_PEER_PORT"
	else
		S_PEER_PORT="--sport $PLUTO_PEER_PORT"
		D_PEER_PORT="--dport $PLUTO_PEER_PORT"
	fi
fi

# resolve octal escape sequences
PLUTO_MY_ID=`printf "$PLUTO_MY_ID"`
PLUTO_PEER_ID=`printf "$PLUTO_PEER_ID"`

case "$PLUTO_VERB:$1" in
up-host:)
	# connection to me coming up
	# If you are doing a custom version, firewall commands go here.
	;;
down-host:)
	# connection to me going down
	# If you are doing a custom version, firewall commands go here.
	;;
up-client:)
	# connection to my client subnet coming up
	# If you are doing a custom version, firewall commands go here.
	;;
down-client:)
	# connection to my client subnet going down
	# If you are doing a custom version, firewall commands go here.
	;;
up-host:iptables)
	# connection to me, with (left/right)firewall=yes, coming up
	# This is used only by the default updown script, not by your custom
	# ones, so do not mess with it; see CAUTION comment up at top.
	iptables -w -I vpn_input_bypass 1 -i $PLUTO_INTERFACE -p $PLUTO_MY_PROTOCOL \
	    -s $PLUTO_PEER_CLIENT $S_PEER_PORT \
	    -d $PLUTO_ME $D_MY_PORT $IPSEC_POLICY_IN -j ACCEPT
	iptables -w -I vpn_output_bypass 1 -o $PLUTO_INTERFACE -p $PLUTO_PEER_PROTOCOL \
	    -s $PLUTO_ME $S_MY_PORT $IPSEC_POLICY_OUT \
	    -d $PLUTO_PEER_CLIENT $D_PEER_PORT -j ACCEPT
	#
	# allow IPIP traffic because of the implicit SA created by the kernel if
	# IPComp is used (for small inbound packets that are not compressed)
	if [ -n "$PLUTO_IPCOMP" ]
	then
	  iptables -w -I vpn_input_bypass 1 -i $PLUTO_INTERFACE -p 4 \
	      -s $PLUTO_PEER -d $PLUTO_ME $IPSEC_POLICY_IN -j ACCEPT
	fi
	#
	# log IPsec host connection setup
	if [ $VPN_LOGGING ]
	then
	  if [ "$PLUTO_PEER_CLIENT" = "$PLUTO_PEER/32" ]
	  then
	    logger -t $TAG -p $FAC_PRIO \
	      "+ $PLUTO_PEER_ID $PLUTO_PEER -- $PLUTO_ME"
	  else
	    logger -t $TAG -p $FAC_PRIO \
	      "+ $PLUTO_PEER_ID $PLUTO_PEER_CLIENT == $PLUTO_PEER -- $PLUTO_ME"
	  fi
	fi
	local connType=`uci get strongswan.$PLUTO_CONNECTION`
	if [ "$connType" == "site2site" ]
	then
	#{
	  local is_gre_local=`uci get strongswan.$PLUTO_CONNECTION.local_sec_group`
	  if [ "$is_gre_local"="gre" ]
	  then
	  #{
		local gre_interface_name=`uci get strongswan.$PLUTO_CONNECTION.local_gre_iface`
		cmm -c tunnel gre-$gre_interface_name add gre ipsec 1
		local split_dns=`uci get strongswan.$PLUTO_CONNECTION.split_dns`
		if [ $split_dns -eq 1 ]
		then
		#{
		  local split_dns_config=$(uci_get_state dhcp.splitdns."$PLUTO_CONNECTION")
		  if [ $split_dns_config -eq 0 ]
		  then #equal to zero
		  #{
		    local split_dns_server1=`uci get strongswan.$PLUTO_CONNECTION.split_dns_server1`
		    local split_dns_server2=`uci get strongswan.$PLUTO_CONNECTION.split_dns_server2 2>/dev/null`
		    local split_dns_domain=`uci get strongswan.$PLUTO_CONNECTION.split_dns_domain`

		    uci set umbrella.$PLUTO_CONNECTION=vpn_bypass_domains
		    for tempDomain in $split_dns_domain
		    do
			uci add_list dhcp.@dnsmasq[0].server="/$tempDomain/$split_dns_server1"
			[ -n "$split_dns_server2" ] && {
				uci add_list dhcp.@dnsmasq[0].server="/$tempDomain/$split_dns_server2"
			}

			uci add_list umbrella.$PLUTO_CONNECTION.split_dns_domain="$tempDomain"
		    done
		    uci add_list umbrella.$PLUTO_CONNECTION.split_dns_server="$split_dns_server1"
		    [ -n "$split_dns_server2" ] && {
			uci add_list umbrella.$PLUTO_CONNECTION.split_dns_server="$split_dns_server2"
		    }
		    uci commit dhcp

		    local um_enabled=`uci get umbrella.global_config_0.enable`
		    if [ $um_enabled -eq 1 ]
		    then
			/etc/init.d/umbrella reload "vpn_reload" 2>/dev/null
		    else
			/etc/init.d/dnsmasq reload 2>/dev/null
			#commit split-dns config in umbrella if it is not enabled.
			uci commit umbrella
		    fi
		    uci_toggle_state dhcp splitdns $PLUTO_CONNECTION 1
		  #}
		  else #greater than 1
		    uci_toggle_state dhcp splitdns $PLUTO_CONNECTION `expr $split_dns_config + 1`
		  fi
		#}
		fi
	  #}
	  fi
	#}
	fi
	;;
down-host:iptables)
	# connection to me, with (left/right)firewall=yes, going down
	# This is used only by the default updown script, not by your custom
	# ones, so do not mess with it; see CAUTION comment up at top.
	iptables -w -D vpn_input_bypass -i $PLUTO_INTERFACE -p $PLUTO_MY_PROTOCOL \
	    -s $PLUTO_PEER_CLIENT $S_PEER_PORT \
	    -d $PLUTO_ME $D_MY_PORT $IPSEC_POLICY_IN -j ACCEPT
	iptables -w -D vpn_output_bypass -o $PLUTO_INTERFACE -p $PLUTO_PEER_PROTOCOL \
	    -s $PLUTO_ME $S_MY_PORT $IPSEC_POLICY_OUT \
	    -d $PLUTO_PEER_CLIENT $D_PEER_PORT -j ACCEPT
	#
	# IPIP exception teardown
	if [ -n "$PLUTO_IPCOMP" ]
	then
	  iptables -w -D vpn_input_bypass -i $PLUTO_INTERFACE -p 4 \
	      -s $PLUTO_PEER -d $PLUTO_ME $IPSEC_POLICY_IN -j ACCEPT
	fi
	#
	# log IPsec host connection teardown
	if [ $VPN_LOGGING ]
	then
	  if [ "$PLUTO_PEER_CLIENT" = "$PLUTO_PEER/32" ]
	  then
	    logger -t $TAG -p $FAC_PRIO -- \
	      "- $PLUTO_PEER_ID $PLUTO_PEER -- $PLUTO_ME"
	  else
	    logger -t $TAG -p $FAC_PRIO -- \
	    "- $PLUTO_PEER_ID $PLUTO_PEER_CLIENT == $PLUTO_PEER -- $PLUTO_ME"
	  fi
	fi
	local connType=`uci get $STRONGSWAN.$PLUTO_CONNECTION`
	if [ "$connType" == "site2site" ]
	then
	#{
	  local is_gre_local=`uci get $STRONGSWAN.$PLUTO_CONNECTION.local_sec_group`
	  if [ "$is_gre_local"="gre" ]
	  then
		local gre_interface_name=`uci get $STRONGSWAN.$PLUTO_CONNECTION.local_gre_iface`
		cmm -c tunnel gre-$gre_interface_name add gre ipsec 0
		local split_dns=`uci get $STRONGSWAN.$PLUTO_CONNECTION.split_dns`
		if [ $split_dns -eq 1 ]
		then
		#{
		  local split_dns_config=$(uci_get_state dhcp.splitdns."$PLUTO_CONNECTION")
		  if [ $split_dns_config -eq 1 ]
		  then #equal to 1 (last ipsec sa down).
		  #{
		    local split_dns_server1=`uci get $STRONGSWAN.$PLUTO_CONNECTION.split_dns_server1`
		    local split_dns_server2=`uci get $STRONGSWAN.$PLUTO_CONNECTION.split_dns_server2 2>/dev/null`
		    local split_dns_domain=`uci get $STRONGSWAN.$PLUTO_CONNECTION.split_dns_domain`

		    uci del umbrella.$PLUTO_CONNECTION
		    for tempDomain in $split_dns_domain
		    do
			uci del_list dhcp.@dnsmasq[0].server="/$tempDomain/$split_dns_server1"
			[ -n "$split_dns_server2" ] && {
				uci del_list dhcp.@dnsmasq[0].server="/$tempDomain/$split_dns_server2"
			}
		    done
		    uci commit dhcp

		    local um_enabled=`uci get umbrella.global_config_0.enable`
		    if [ $um_enabled -eq 1 ]
		    then
			/etc/init.d/umbrella reload "vpn_reload" 2>/dev/null
		    else
			/etc/init.d/dnsmasq reload 2>/dev/null
			#commit split-dns config in umbrella if it is not enabled.
			uci commit umbrella
		    fi
		    uci_toggle_state dhcp splitdns $PLUTO_CONNECTION 0
	 	  #}
		  else #not equal to 1
		    if [ $split_dns_config -ge 2 ]
		    then
		      uci_toggle_state dhcp splitdns $PLUTO_CONNECTION `expr $split_dns_config - 1`
		    fi
		  fi
	      #}
	      fi
	  fi
	#}
	fi

	;;
up-client:iptables)
	# connection to client subnet, with (left/right)firewall=yes, coming up
	# This is used only by the default updown script, not by your custom
	# ones, so do not mess with it; see CAUTION comment up at top.
	if [ "$PLUTO_PEER_CLIENT" != "$PLUTO_MY_SOURCEIP/32" ]
	then
	  iptables -w -I vpn_fw_bypass 1 -o $PLUTO_INTERFACE -p $PLUTO_PEER_PROTOCOL \
	      -s $PLUTO_MY_CLIENT $S_MY_PORT \
	      -d $PLUTO_PEER_CLIENT $D_PEER_PORT $IPSEC_POLICY_OUT -j ACCEPT
	  iptables -w -I vpn_fw_bypass 1 -i $PLUTO_INTERFACE -p $PLUTO_MY_PROTOCOL \
	      -s $PLUTO_PEER_CLIENT $S_PEER_PORT \
	      -d $PLUTO_MY_CLIENT $D_MY_PORT $IPSEC_POLICY_IN -j ACCEPT
	  iptables -w -I vpn_nat_bypass 1 -t nat -o $PLUTO_INTERFACE -p $PLUTO_PEER_PROTOCOL \
	      -s $PLUTO_MY_CLIENT $S_MY_PORT \
	      -d $PLUTO_PEER_CLIENT $D_PEER_PORT $IPSEC_POLICY_OUT -j ACCEPT

	  local connType=`uci get strongswan.$PLUTO_CONNECTION`
	  if [ "$connType" == "site2site" ]
	  then
	  #{
	    local split_dns=`uci get strongswan.$PLUTO_CONNECTION.split_dns`
	    if [ $split_dns -eq 1 ]
	    then
	    #{
		local split_dns_config=$(uci_get_state dhcp.splitdns."$PLUTO_CONNECTION")
		if [ $split_dns_config -eq 0 ]
		then #equal to zero
		#{
		  local split_dns_server1=`uci get strongswan.$PLUTO_CONNECTION.split_dns_server1`
		  local split_dns_server2=`uci get strongswan.$PLUTO_CONNECTION.split_dns_server2 2>/dev/null`
		  local split_dns_domain=`uci get strongswan.$PLUTO_CONNECTION.split_dns_domain`

		  uci set umbrella.$PLUTO_CONNECTION=vpn_bypass_domains
		  for tempDomain in $split_dns_domain
		  do
			uci add_list dhcp.@dnsmasq[0].server="/$tempDomain/$split_dns_server1"
			[ -n "$split_dns_server2" ] && {
				uci add_list dhcp.@dnsmasq[0].server="/$tempDomain/$split_dns_server2"
			}

			uci add_list umbrella.$PLUTO_CONNECTION.split_dns_domain="$tempDomain"
		  done
		  uci add_list umbrella.$PLUTO_CONNECTION.split_dns_server="$split_dns_server1"
		  [ -n "$split_dns_server2" ] && {
			uci add_list umbrella.$PLUTO_CONNECTION.split_dns_server="$split_dns_server2"
		  }
		  uci commit dhcp

		  local um_enabled=`uci get umbrella.global_config_0.enable`
		  if [ $um_enabled -eq 1 ]
		  then
			/etc/init.d/umbrella reload "vpn_reload" 2>/dev/null
		  else
			/etc/init.d/dnsmasq reload 2>/dev/null
			#commit split-dns config in umbrella if it is not enabled.
			uci commit umbrella
		  fi
		  uci_toggle_state dhcp splitdns $PLUTO_CONNECTION 1
		#}
		else #greater than 1
		  uci_toggle_state dhcp splitdns $PLUTO_CONNECTION `expr $split_dns_config + 1`
		fi
	    #}
	    fi
	    local netbios=`uci get strongswan.$PLUTO_CONNECTION.netbios`
	    if [ $netbios -eq 1 ]
	    then
		nbvpn add $PLUTO_MY_CLIENT $PLUTO_PEER_CLIENT
	    fi
	    local isSpokeGW=`uci get strongswan.$PLUTO_CONNECTION.remote_sec_group`
	    [ "$isSpokeGW" == "any" ] && {
	    #A spoke scenario.
	    	[ "$connName" != "$PLUTO_CONNECTION" ] && [ $(echo $connName | grep bkp) ] && {
			#handle "ip rules", switch them to this backup connection provided they are on different wan interface.
			local wan_interface local_backup_iface
			wan_interface=$(uci get strongswan.$PLUTO_CONNECTION.wan_interface)
			local_backup_iface=$(uci get strongswan.$PLUTO_CONNECTION.local_backup_iface)
			[ "$wan_interface" != "$local_backup_iface" ] && {
				#To be handled case. A backup connection UP and spoke traffic case
				#1. Try delete primary connections "ip rules"
				#2. add new rules as per secondary WAN.
				local primary_wan_table backup_wan_table local_endpoint local_backup
				local_endpoint=$(uci get strongswan.$PLUTO_CONNECTION.local_endpoint)
				local_backup=$(uci get strongswan.$PLUTO_CONNECTION.local_backup)
				primary_wan_table=$(ip -4 rule show | grep $local_endpoint | xargs | cut -d ' ' -f 7)
				backup_wan_table=$(ip -4 rule show | grep $local_backup | xargs | cut -d ' ' -f 7)
				local_sec_group=$(uci get strongswan.$PLUTO_CONNECTION.local_sec_group)
				case $local_sec_group in
				ip)
					local local_sec_ip=$(uci get strongswan.$PLUTO_CONNECTION.local_sec_ip)
					local rule=$(ip rule show | grep "$local_sec_ip lookup $primary_wan_table" | cut -d: -f 1)
					[ "$rule" == "" ] && rule=0
					[ "$rule" -ge 1 ] && {
						#go for deletion and add backup related.
						ip -4 rule del pref $rule
						ip -4 rule add pref $rule from $local_sec_ip lookup $backup_wan_table
					}
				;;
				subnet)
					local local_subnet=$(uci get strongswan.$PLUTO_CONNECTION.local_subnet)
					local local_subnetmask=$(uci get strongswan.$PLUTO_CONNECTION.local_subnetmask)
					local rule=$(ip rule show | grep "$local_subnet/$local_subnetmask lookup $primary_wan_table" | cut -d: -f 1)
					[ "$rule" == "" ] && rule=0
					[ "$rule" -ge 1 ] && {
						ip -4 rule del pref $rule
						ip -4 rule add pref $rule from $local_subnet/$local_subnetmask lookup $backup_wan_table
					}
				;;
				ipgroup)
					local ipgroup=$(uci get strongswan.$PLUTO_CONNECTION.local_ip_group)
					local group_ipaddrs=$(uci get ipgroup.$ipgroup.ipv4_addr)
					local group_subnets=$(uci get ipgroups.$ipgroup.ipv4_subnet)
					for i in $group_ipaddrs $group_subnets
					do
						rule=$(ip rule show | grep "$i lookup $primary_wan_table" | cut -d: -f 1)
						[ "$rule" == "" ] && rule=0
						if [ "$rule" -ge 1 ]
						then
							ip -4 rule del pref $rule
							ip -4 rule add pref $rule from $i lookup $backup_wan_table
						else
							#if there is no rule then the job might have been done by someone else/other updown event 
							break
						fi
					done
				;;
				esac
			}
		}
	    }

	    vpn_clear_connections $PLUTO_MY_CLIENT $PLUTO_PEER_CLIENT
	  #}
	  elif [ "$connType" == "client" ]
	  then
	  #{
	   if [ "$connName" == "$PLUTO_CONNECTION" ]
	   then
	   #{
		received_backups=$(grep backupserver $EZFILE | cut -d " " -f 2-)
		auto_conf_backups=$(uci get strongswan.$PLUTO_CONNECTION.backup_server_auto 2> /dev/null | sed 's/ /,/g')

		if [ "$received_backups" != "$auto_conf_backups" ]
		then
		#{
			UCIRECORD=`uci show strongswan.$PLUTO_CONNECTION | grep -v backup_server_auto`
			uci del strongswan.$PLUTO_CONNECTION
			for line in $UCIRECORD; do
			   uci set $line
			done

			local backupServers=`grep backupserver $EZFILE | cut -d " " -f 2-| sed 's/,/ /g'`
			logger -t VPN "Configuring Tele-worker VPN client back-up server settings. BackupServers: $backupServers"

	    		# This will clear the previos data (if any)
			uci set strongswan.$PLUTO_CONNECTION.backup_server_auto=
			for backup in $backupServers
			do
			  logger -t VPN "BackupServers: $backup"
			  uci add_list strongswan.$PLUTO_CONNECTION.backup_server_auto=$backup
			done
			/etc/init.d/strongswan reload "autobackup"
			killall -9 tvpnc_timer
			timerCtrl "+$PLUTO_CONNECTION"
		#}
		fi
	  #}
	  fi

	    #Handling split-DNS related data.
	    local splitdns=`grep -e "^splitdns" $EZFILE | cut -d ' ' -f 2- | sed 's/,/ /g'`
	    local nameserver=`grep -e "^nameserver" $EZFILE | perl -e 'print reverse<>' | cut -d ' ' -f 2`

	    [ -n "$splitdns" ] && [ -n "$nameserver" ] && {
	      uci set dhcp.$PLUTO_CONNECTION=dnsmasq
	      uci set umbrella.$PLUTO_CONNECTION=vpn_bypass_domains
	      for dns in $splitdns
	      do
		for server in $nameserver
		do
		  uci add_list dhcp.$PLUTO_CONNECTION.server="/$dns/$server"
		done

		uci add_list umbrella.$PLUTO_CONNECTION.split_dns_domain=$dns
	      done
	      uci set dhcp.$PLUTO_CONNECTION.rebind_protection=0

	      for server in $nameserver
	      do
		uci add_list umbrella.$PLUTO_CONNECTION.split_dns_server=$server
	      done
	      uci commit dhcp

	      local um_enabled=`uci get umbrella.global_config_0.enable`
	      if [ $um_enabled -eq 1 ]
              then
		/etc/init.d/umbrella reload "vpn_reload" 2>/dev/null
	      else
		/etc/init.d/dnsmasq reload 2>/dev/null
		#commit split-dns config in umbrella if it is not enabled.
		uci commit umbrella
	      fi
	    }
	    #Full DNS mode. In full DNS mode if umbrella is enabled then it gets highest priority.
	    [ -n "$nameserver" ] && [ -z "$splitdns" ] && {
		uci set dhcp.$PLUTO_CONNECTION=dnsmasq
		for server in $nameserver
		do
			uci add_list dhcp.$PLUTO_CONNECTION.server="$server"
		done
		uci set dhcp.$PLUTO_CONNECTION.rebind_protection=0

		uci commit dhcp
		/etc/init.d/dnsmasq reload 2>/dev/null
	    }
	    #Handling addition of SNAT rules incase of tvpnc in client mode
	    local mode=`uci get strongswan.$PLUTO_CONNECTION.mode 2>/dev/null`
	    [ "$mode" != "nem" ] && {
               network_active_lan_subnets lanSubnets
               local toSource=`echo $PLUTO_MY_CLIENT | cut -d '/' -f 1`
	       local pptpdenable=`uci get pptpd.global.enable`
	       local l2tpdenable=`uci get l2tpd.global.enable`

               iptables -w -I vpn_tvpnc_snat 1 -t nat -o $PLUTO_INTERFACE -p $PLUTO_PEER_PROTOCOL \
                  -s $lanSubnets -d $PLUTO_PEER_CLIENT -m comment --comment $PLUTO_CONNECTION  \
                  -j SNAT --to-source  $toSource

	       if [ "$pptpdenable" = "1" ]
               then
               local pptpdStartIP=`uci get pptpd.global.ip_start`
               local pptpdEndIP=`uci get pptpd.global.ip_end`
               iptables -w -I vpn_tvpnc_snat 1 -t nat -o $PLUTO_INTERFACE -p $PLUTO_PEER_PROTOCOL \
                  -m iprange --src-range $pptpdStartIP-$pptpdEndIP -d $PLUTO_PEER_CLIENT -m comment --comment $PLUTO_CONNECTION \
                  -j SNAT --to-source  $toSource
               fi

	       if [ "$l2tpdenable" = "1" ]
               then
               local l2tpdStartIP=`uci get l2tpd.global.ip_start`
               local l2tpdEndIP=`uci get l2tpd.global.ip_end`
               iptables -w -I vpn_tvpnc_snat 1 -t nat -o $PLUTO_INTERFACE -p $PLUTO_PEER_PROTOCOL \
                  -m iprange --src-range $l2tpdStartIP-$l2tpdEndIP -d $PLUTO_PEER_CLIENT -m comment --comment $PLUTO_CONNECTION \
                  -j SNAT --to-source  $toSource
	       fi
	    }
	  #}
	  fi
	fi
	#
	# a virtual IP requires an INPUT and OUTPUT rule on the host
	# or sometimes host access via the internal IP is needed
	if [ -n "$PLUTO_MY_SOURCEIP" -o -n "$PLUTO_HOST_ACCESS" ]
	then
	  iptables -w -I vpn_input_bypass 1 -i $PLUTO_INTERFACE -p $PLUTO_MY_PROTOCOL \
	      -s $PLUTO_PEER_CLIENT $S_PEER_PORT \
	      -d $PLUTO_MY_CLIENT $D_MY_PORT $IPSEC_POLICY_IN -j ACCEPT
	  iptables -w -I vpn_output_bypass 1 -o $PLUTO_INTERFACE -p $PLUTO_PEER_PROTOCOL \
	      -s $PLUTO_MY_CLIENT $S_MY_PORT \
	      -d $PLUTO_PEER_CLIENT $D_PEER_PORT $IPSEC_POLICY_OUT -j ACCEPT
	fi
	#
	# allow IPIP traffic because of the implicit SA created by the kernel if
	# IPComp is used (for small inbound packets that are not compressed).
	# INPUT is correct here even for forwarded traffic.
	if [ -n "$PLUTO_IPCOMP" ]
	then
	  iptables -w -I vpn_input_bypass 1 -i $PLUTO_INTERFACE -p 4 \
	      -s $PLUTO_PEER -d $PLUTO_ME $IPSEC_POLICY_IN -j ACCEPT
	fi
	#
	# log IPsec client connection setup
	if [ $VPN_LOGGING ]
	then
	  if [ "$PLUTO_PEER_CLIENT" = "$PLUTO_PEER/32" ]
	  then
	    logger -t $TAG -p $FAC_PRIO \
	      "+ $PLUTO_PEER_ID $PLUTO_PEER -- $PLUTO_ME == $PLUTO_MY_CLIENT"
	  else
	    logger -t $TAG -p $FAC_PRIO \
	      "+ $PLUTO_PEER_ID $PLUTO_PEER_CLIENT == $PLUTO_PEER -- $PLUTO_ME == $PLUTO_MY_CLIENT"
	  fi
	fi
	;;
down-client:iptables)
	# connection to client subnet, with (left/right)firewall=yes, going down
	# This is used only by the default updown script, not by your custom
	# ones, so do not mess with it; see CAUTION comment up at top.
	if [ "$PLUTO_PEER_CLIENT" != "$PLUTO_MY_SOURCEIP/32" ]
	then
	#{
	  iptables -w -D vpn_fw_bypass -o $PLUTO_INTERFACE -p $PLUTO_PEER_PROTOCOL \
	      -s $PLUTO_MY_CLIENT $S_MY_PORT \
	      -d $PLUTO_PEER_CLIENT $D_PEER_PORT \
	         $IPSEC_POLICY_OUT -j ACCEPT
	  iptables -w -D vpn_fw_bypass -i $PLUTO_INTERFACE -p $PLUTO_MY_PROTOCOL \
	      -s $PLUTO_PEER_CLIENT $S_PEER_PORT \
	      -d $PLUTO_MY_CLIENT $D_MY_PORT \
	         $IPSEC_POLICY_IN -j ACCEPT
	  iptables -w -D vpn_nat_bypass -t nat -o $PLUTO_INTERFACE -p $PLUTO_PEER_PROTOCOL \
	      -s $PLUTO_MY_CLIENT $S_MY_PORT \
	      -d $PLUTO_PEER_CLIENT $D_PEER_PORT $IPSEC_POLICY_OUT -j ACCEPT

	  local connType=`uci get $STRONGSWAN.$PLUTO_CONNECTION`
	  if [ "$connType" == "site2site" ]
	  then
	  #{
	    local split_dns=`uci get $STRONGSWAN.$PLUTO_CONNECTION.split_dns`
	    if [ $split_dns -eq 1 ]
	    then
	    #{
		local split_dns_config=$(uci_get_state dhcp.splitdns."$PLUTO_CONNECTION")
		if [ $split_dns_config -eq 1 ]
		then #equal to 1 (last ipsec sa down).
		#{
		  local split_dns_server1=`uci get $STRONGSWAN.$PLUTO_CONNECTION.split_dns_server1`
		  local split_dns_server2=`uci get $STRONGSWAN.$PLUTO_CONNECTION.split_dns_server2 2>/dev/null`
		  local split_dns_domain=`uci get $STRONGSWAN.$PLUTO_CONNECTION.split_dns_domain`

		  uci del umbrella.$PLUTO_CONNECTION
		  for tempDomain in $split_dns_domain
		  do
			uci del_list dhcp.@dnsmasq[0].server="/$tempDomain/$split_dns_server1"
			[ -n "$split_dns_server2" ] && {
				uci del_list dhcp.@dnsmasq[0].server="/$tempDomain/$split_dns_server2"
			}
		  done

		  uci commit dhcp
		  local um_enabled=`uci get umbrella.global_config_0.enable`
		  if [ $um_enabled -eq 1 ]
		  then
			/etc/init.d/umbrella reload "vpn_reload" 2>/dev/null
		  else
			/etc/init.d/dnsmasq reload 2>/dev/null
			#commit split-dns config in umbrella if it is not enabled.
			uci commit umbrella
		  fi
		  uci_toggle_state dhcp splitdns $PLUTO_CONNECTION 0
		#}
		else #not equal to 1
		  if [ $split_dns_config -ge 2 ]
		  then
		    uci_toggle_state dhcp splitdns $PLUTO_CONNECTION `expr $split_dns_config - 1`
		  fi
		fi
	    #}
	    fi
	    local netbios=`uci get $STRONGSWAN.$PLUTO_CONNECTION.netbios`
	    if [ $netbios -eq 1 ]
	    then
		nbvpn del $PLUTO_MY_CLIENT $PLUTO_PEER_CLIENT
	    fi
	    local isSpokeGW=`uci get $STRONGSWAN.$PLUTO_CONNECTION.remote_sec_group`
	    [ "$isSpokeGW" == "any" ] && {
	    #A spoke scenario.
	    	[ "$connName" != "$PLUTO_CONNECTION" ] && [ $(echo $connName | grep bkp) ] && {
			#handle "ip rules", switch them to this backup connection provided they are on different wan interface.
			local wan_interface local_backup_iface
			wan_interface=$(uci get $STRONGSWAN.$PLUTO_CONNECTION.wan_interface)
			local_backup_iface=$(uci get $STRONGSWAN.$PLUTO_CONNECTION.local_backup_iface)
			[ "$wan_interface" != "$local_backup_iface" ] && {
				#To be handled case. A backup connection DOWN and spoke traffic case
				#1. Try delete backup WAN connections "ip rules"
				#2. add new rules as per primary WAN.
				local primary_wan_table backup_wan_table local_endpoint local_backup
				local_endpoint=$(uci get $STRONGSWAN.$PLUTO_CONNECTION.local_endpoint)
				local_backup=$(uci get $STRONGSWAN.$PLUTO_CONNECTION.local_backup)
				primary_wan_table=$(ip -4 rule show | grep $local_endpoint | xargs | cut -d ' ' -f 7)
				backup_wan_table=$(ip -4 rule show | grep $local_backup | xargs | cut -d ' ' -f 7)
				local_sec_group=$(uci get $STRONGSWAN.$PLUTO_CONNECTION.local_sec_group)
				case $local_sec_group in
				ip)
					local local_sec_ip=$(uci get $STRONGSWAN.$PLUTO_CONNECTION.local_sec_ip)
					local rule=$(ip rule show | grep "$local_sec_ip lookup $backup_wan_table" | cut -d: -f 1)
					[ "$rule" == "" ] && rule=0
					[ "$rule" -ge 1 ] && {
						#go for deletion and add backup related.
						ip -4 rule del pref $rule
						ip -4 rule add pref $rule from $local_sec_ip lookup $primary_wan_table
					}
				;;
				subnet)
					local local_subnet=$(uci get $STRONGSWAN.$PLUTO_CONNECTION.local_subnet)
					local local_subnetmask=$(uci get $STRONGSWAN.$PLUTO_CONNECTION.local_subnetmask)
					local rule=$(ip rule show | grep "$local_subnet/$local_subnetmask lookup $backup_wan_table" | cut -d: -f 1)
					[ "$rule" == "" ] && rule=0
					[ "$rule" -ge 1 ] && {
						ip -4 rule del pref $rule
						ip -4 rule add pref $rule from $local_subnet/$local_subnetmask lookup $primary_wan_table
					}
				;;
				ipgroup)
					local ipgroup=$(uci get $STRONGSWAN.$PLUTO_CONNECTION.local_ip_group)
					local group_ipaddrs=$(uci get ipgroup.$ipgroup.ipv4_addr)
					local group_subnets=$(uci get ipgroups.$ipgroup.ipv4_subnet)
					for i in $group_ipaddrs $group_subnets
					do
						rule=$(ip rule show | grep "$i lookup $backup_wan_table" | cut -d: -f 1)
						[ "$rule" == "" ] && rule=0
						if [ "$rule" -ge 1 ]
						then
							ip -4 rule del pref $rule
							ip -4 rule add pref $rule from $i lookup $primary_wan_table
						else
							#if there is no rule then the job might have been done by someone else/other updown event 
							break
						fi
					done
				;;
				esac
			}
		}
	    }
	  #}
	  elif [ "$connType" == "client" ]
	  then
	  #{
	    #Handling split-DNS related data.
	    local isDataConfigured=`uci get dhcp.$PLUTO_CONNECTION 2>/dev/null`

	    [ -n "$isDataConfigured" ] && {
	      uci del umbrella.$PLUTO_CONNECTION 2>/dev/null
	      uci delete dhcp.$PLUTO_CONNECTION
	      uci commit dhcp

	      local um_enabled=`uci get umbrella.global_config_0.enable`
	      if [ $um_enabled -eq 1 ]
	      then
		/etc/init.d/umbrella reload "vpn_reload" 2>/dev/null
	      else
		/etc/init.d/dnsmasq reload 2>/dev/null
		#commit split-dns config in umbrella if it is not enabled.
		uci commit umbrella
	      fi
	    }
	    #Handling deletion of SNAT rules irrespective of tvpnc mode
            iptables -w -t nat -F vpn_tvpnc_snat
	  #}
	  fi
	#}
	fi
	#
	# a virtual IP requires an INPUT and OUTPUT rule on the host
	# or sometimes host access via the internal IP is needed
	if [ -n "$PLUTO_MY_SOURCEIP" -o -n "$PLUTO_HOST_ACCESS" ]
	then
	  iptables -w -D vpn_input_bypass -i $PLUTO_INTERFACE -p $PLUTO_MY_PROTOCOL \
	      -s $PLUTO_PEER_CLIENT $S_PEER_PORT \
	      -d $PLUTO_MY_CLIENT $D_MY_PORT \
	         $IPSEC_POLICY_IN -j ACCEPT
	  iptables -w -D vpn_output_bypass -o $PLUTO_INTERFACE -p $PLUTO_PEER_PROTOCOL \
	      -s $PLUTO_MY_CLIENT $S_MY_PORT \
	      -d $PLUTO_PEER_CLIENT $D_PEER_PORT \
	         $IPSEC_POLICY_OUT -j ACCEPT
	fi
	#
	# IPIP exception teardown
	if [ -n "$PLUTO_IPCOMP" ]
	then
	  iptables -w -D INPUT -i $PLUTO_INTERFACE -p 4 \
	      -s $PLUTO_PEER -d $PLUTO_ME $IPSEC_POLICY_IN -j ACCEPT
	fi
	#
	# log IPsec client connection teardown
	if [ $VPN_LOGGING ]
	then
	  if [ "$PLUTO_PEER_CLIENT" = "$PLUTO_PEER/32" ]
	  then
	    logger -t $TAG -p $FAC_PRIO -- \
	      "- $PLUTO_PEER_ID $PLUTO_PEER -- $PLUTO_ME == $PLUTO_MY_CLIENT"
	  else
	    logger -t $TAG -p $FAC_PRIO -- \
	      "- $PLUTO_PEER_ID $PLUTO_PEER_CLIENT == $PLUTO_PEER -- $PLUTO_ME == $PLUTO_MY_CLIENT"
	  fi
	fi
	;;
#
# IPv6
#
up-host-v6:)
	# connection to me coming up
	# If you are doing a custom version, firewall commands go here.
	;;
down-host-v6:)
	# connection to me going down
	# If you are doing a custom version, firewall commands go here.
	;;
up-client-v6:)
	# connection to my client subnet coming up
	# If you are doing a custom version, firewall commands go here.
	;;
down-client-v6:)
	# connection to my client subnet going down
	# If you are doing a custom version, firewall commands go here.
	;;
up-host-v6:iptables)
	# connection to me, with (left/right)firewall=yes, coming up
	# This is used only by the default updown script, not by your custom
	# ones, so do not mess with it; see CAUTION comment up at top.
	ip6tables -I INPUT 1 -i $PLUTO_INTERFACE -p $PLUTO_MY_PROTOCOL \
	    -s $PLUTO_PEER_CLIENT $S_PEER_PORT \
	    -d $PLUTO_ME $D_MY_PORT $IPSEC_POLICY_IN -j ACCEPT
	ip6tables -I OUTPUT 1 -o $PLUTO_INTERFACE -p $PLUTO_PEER_PROTOCOL \
	    -s $PLUTO_ME $S_MY_PORT $IPSEC_POLICY_OUT \
	    -d $PLUTO_PEER_CLIENT $D_PEER_PORT -j ACCEPT
	#
	# allow IP6IP6 traffic because of the implicit SA created by the kernel if
	# IPComp is used (for small inbound packets that are not compressed)
	if [ -n "$PLUTO_IPCOMP" ]
	then
	  ip6tables -I INPUT 1 -i $PLUTO_INTERFACE -p 41 \
	      -s $PLUTO_PEER -d $PLUTO_ME $IPSEC_POLICY_IN -j ACCEPT
	fi
	#
	# log IPsec host connection setup
	if [ $VPN_LOGGING ]
	then
	  if [ "$PLUTO_PEER_CLIENT" = "$PLUTO_PEER/128" ]
	  then
	    logger -t $TAG -p $FAC_PRIO \
	      "+ $PLUTO_PEER_ID $PLUTO_PEER -- $PLUTO_ME"
	  else
	    logger -t $TAG -p $FAC_PRIO \
	      "+ $PLUTO_PEER_ID $PLUTO_PEER_CLIENT == $PLUTO_PEER -- $PLUTO_ME"
	  fi
	fi
	;;
down-host-v6:iptables)
	# connection to me, with (left/right)firewall=yes, going down
	# This is used only by the default updown script, not by your custom
	# ones, so do not mess with it; see CAUTION comment up at top.
	ip6tables -D INPUT -i $PLUTO_INTERFACE -p $PLUTO_MY_PROTOCOL \
	    -s $PLUTO_PEER_CLIENT $S_PEER_PORT \
	    -d $PLUTO_ME $D_MY_PORT $IPSEC_POLICY_IN -j ACCEPT
	ip6tables -D OUTPUT -o $PLUTO_INTERFACE -p $PLUTO_PEER_PROTOCOL \
	    -s $PLUTO_ME $S_MY_PORT $IPSEC_POLICY_OUT \
	    -d $PLUTO_PEER_CLIENT $D_PEER_PORT -j ACCEPT
	#
	# IP6IP6 exception teardown
	if [ -n "$PLUTO_IPCOMP" ]
	then
	  ip6tables -D INPUT -i $PLUTO_INTERFACE -p 41 \
	      -s $PLUTO_PEER -d $PLUTO_ME $IPSEC_POLICY_IN -j ACCEPT
	fi
	#
	# log IPsec host connection teardown
	if [ $VPN_LOGGING ]
	then
	  if [ "$PLUTO_PEER_CLIENT" = "$PLUTO_PEER/128" ]
	  then
	    logger -t $TAG -p $FAC_PRIO -- \
	      "- $PLUTO_PEER_ID $PLUTO_PEER -- $PLUTO_ME"
	  else
	    logger -t $TAG -p $FAC_PRIO -- \
	    "- $PLUTO_PEER_ID $PLUTO_PEER_CLIENT == $PLUTO_PEER -- $PLUTO_ME"
	  fi
	fi
	;;
up-client-v6:iptables)
	# connection to client subnet, with (left/right)firewall=yes, coming up
	# This is used only by the default updown script, not by your custom
	# ones, so do not mess with it; see CAUTION comment up at top.
	if [ "$PLUTO_PEER_CLIENT" != "$PLUTO_MY_SOURCEIP/128" ]
	then
	  ip6tables -I FORWARD 1 -o $PLUTO_INTERFACE -p $PLUTO_PEER_PROTOCOL \
	      -s $PLUTO_MY_CLIENT $S_MY_PORT \
	      -d $PLUTO_PEER_CLIENT $D_PEER_PORT $IPSEC_POLICY_OUT -j ACCEPT
	  ip6tables -I FORWARD 1 -i $PLUTO_INTERFACE -p $PLUTO_MY_PROTOCOL \
	      -s $PLUTO_PEER_CLIENT $S_PEER_PORT \
	      -d $PLUTO_MY_CLIENT $D_MY_PORT $IPSEC_POLICY_IN -j ACCEPT
	fi
	#
	# a virtual IP requires an INPUT and OUTPUT rule on the host
	# or sometimes host access via the internal IP is needed
	if [ -n "$PLUTO_MY_SOURCEIP" -o -n "$PLUTO_HOST_ACCESS" ]
	then
	  ip6tables -I INPUT 1 -i $PLUTO_INTERFACE -p $PLUTO_MY_PROTOCOL \
	      -s $PLUTO_PEER_CLIENT $S_PEER_PORT \
	      -d $PLUTO_MY_CLIENT $D_MY_PORT $IPSEC_POLICY_IN -j ACCEPT
	  ip6tables -I OUTPUT 1 -o $PLUTO_INTERFACE -p $PLUTO_PEER_PROTOCOL \
	      -s $PLUTO_MY_CLIENT $S_MY_PORT \
	      -d $PLUTO_PEER_CLIENT $D_PEER_PORT $IPSEC_POLICY_OUT -j ACCEPT
	fi
	#
	# allow IP6IP6 traffic because of the implicit SA created by the kernel if
	# IPComp is used (for small inbound packets that are not compressed).
	# INPUT is correct here even for forwarded traffic.
	if [ -n "$PLUTO_IPCOMP" ]
	then
	  ip6tables -I INPUT 1 -i $PLUTO_INTERFACE -p 41 \
	      -s $PLUTO_PEER -d $PLUTO_ME $IPSEC_POLICY_IN -j ACCEPT
	fi
	#
	# log IPsec client connection setup
	if [ $VPN_LOGGING ]
	then
	  if [ "$PLUTO_PEER_CLIENT" = "$PLUTO_PEER/128" ]
	  then
	    logger -t $TAG -p $FAC_PRIO \
	      "+ $PLUTO_PEER_ID $PLUTO_PEER -- $PLUTO_ME == $PLUTO_MY_CLIENT"
	  else
	    logger -t $TAG -p $FAC_PRIO \
	      "+ $PLUTO_PEER_ID $PLUTO_PEER_CLIENT == $PLUTO_PEER -- $PLUTO_ME == $PLUTO_MY_CLIENT"
	  fi
	fi
	;;
down-client-v6:iptables)
	# connection to client subnet, with (left/right)firewall=yes, going down
	# This is used only by the default updown script, not by your custom
	# ones, so do not mess with it; see CAUTION comment up at top.
	if [ "$PLUTO_PEER_CLIENT" != "$PLUTO_MY_SOURCEIP/128" ]
	then
	  ip6tables -D FORWARD -o $PLUTO_INTERFACE -p $PLUTO_PEER_PROTOCOL \
	      -s $PLUTO_MY_CLIENT $S_MY_PORT \
	      -d $PLUTO_PEER_CLIENT $D_PEER_PORT \
	         $IPSEC_POLICY_OUT -j ACCEPT
	  ip6tables -D FORWARD -i $PLUTO_INTERFACE -p $PLUTO_MY_PROTOCOL \
	      -s $PLUTO_PEER_CLIENT $S_PEER_PORT \
	      -d $PLUTO_MY_CLIENT $D_MY_PORT \
	         $IPSEC_POLICY_IN -j ACCEPT
	fi
	#
	# a virtual IP requires an INPUT and OUTPUT rule on the host
	# or sometimes host access via the internal IP is needed
	if [ -n "$PLUTO_MY_SOURCEIP" -o -n "$PLUTO_HOST_ACCESS" ]
	then
	  ip6tables -D INPUT -i $PLUTO_INTERFACE -p $PLUTO_MY_PROTOCOL \
	      -s $PLUTO_PEER_CLIENT $S_PEER_PORT \
	      -d $PLUTO_MY_CLIENT $D_MY_PORT \
	         $IPSEC_POLICY_IN -j ACCEPT
	  ip6tables -D OUTPUT -o $PLUTO_INTERFACE -p $PLUTO_PEER_PROTOCOL \
	      -s $PLUTO_MY_CLIENT $S_MY_PORT \
	      -d $PLUTO_PEER_CLIENT $D_PEER_PORT \
	         $IPSEC_POLICY_OUT -j ACCEPT
	fi
	#
	# IP6IP6 exception teardown
	if [ -n "$PLUTO_IPCOMP" ]
	then
	  ip6tables -D INPUT -i $PLUTO_INTERFACE -p 41 \
	      -s $PLUTO_PEER -d $PLUTO_ME $IPSEC_POLICY_IN -j ACCEPT
	fi
	#
	# log IPsec client connection teardown
	if [ $VPN_LOGGING ]
	then
	  if [ "$PLUTO_PEER_CLIENT" = "$PLUTO_PEER/128" ]
	  then
	    logger -t $TAG -p $FAC_PRIO -- \
	      "- $PLUTO_PEER_ID $PLUTO_PEER -- $PLUTO_ME == $PLUTO_MY_CLIENT"
	  else
	    logger -t $TAG -p $FAC_PRIO -- \
	      "- $PLUTO_PEER_ID $PLUTO_PEER_CLIENT == $PLUTO_PEER -- $PLUTO_ME == $PLUTO_MY_CLIENT"
	  fi
	fi
	;;
*)	echo "$0: unknown verb \`$PLUTO_VERB' or parameter \`$1'" >&2
	exit 1
	;;
esac
