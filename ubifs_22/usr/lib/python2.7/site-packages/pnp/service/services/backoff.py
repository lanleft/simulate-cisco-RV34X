################################################################################
# Copyright (c) 2015-17 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Shaurin Desai <shaurdes@cisco.com>
################################################################################
"""PnP Service: Backoff

Backoff parses the work-request to calculate the number of seconds to
backoff (sleep).

Todo:
    * Refactor CCO-Backoff code to check for CCO-timer instead of an existing
        profile.

"""
from time import sleep

import pnp.infra.utils.pnp_utils as pnp_utils
import pnp.infra.utils.timer as timer
from pnp.service.action import ServiceAction
from pnp.service.api.pnp_service import PnPService


class Backoff(PnPService):
    """PnP Service: Backoff
    """
    _default_callback = 900
    _request_type = None

    def run(self):
        """Generates the Backoff Work-Response"""
        for elem in self.request['backoff']:
            if elem != 'reason':
                self._request_type = elem
        # Handle Backoff from CCO Server differently
        backoff_time = self._calculate_time()
        self.success = True
        if not pnp_utils.profile_exists():
            # No profile means that backoff has been called in discovery
            # context. Hence we add cco_backoff timer
            timer.add_timer('cco_backoff', int(backoff_time))

    def _calculate_time(self):
        """Calculates backoff time in seconds

        Returns:
            int: Backoff time in seconds.

        """
        if self._request_type == 'terminate':
            self.action = ServiceAction(pnp_utils.terminate_agent(),
                                        'terminate')
            return 0
        else:
            if self._request_type == 'defaultMinutes':
                time = 60 * int(self.request['backoff']['defaultMinutes'])
                self.profile.backoff = time
            else:
                if self.request['backoff']['callbackAfter'] is None:
                    time = self._default_callback
                else:
                    time = 0
                    callback_after = self.request['backoff']['callbackAfter']
                    for time_unit in callback_after:
                        time_value = int(callback_after[time_unit])
                        if time_unit == 'hours':
                            time += 3600 * time_value
                        elif time_unit == 'minutes':
                            time += 60 * time_value
                        else:
                            time += time_value
            self.profile.callback_after = time
            action_args = [time]
            self.action = ServiceAction(sleep, 'Backoff', *action_args)
            return time
