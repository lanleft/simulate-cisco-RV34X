################################################################################
# Copyright (c) 2015-17 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Shaurin Desai <shaurdes@cisco.com>
################################################################################
"""PnP XML Generator

The XML Generator module is responsible for generating the XML payloads used in
the PnP protocol.
"""
from xml.sax.saxutils import escape as escape_xml

from pnp.infra.xml.xmlparser import XMLParser


def _gen_pnp_elem(udi, sid='', usr='', pwd=''):
    """Generates pnp element for the "urn:cisco:pnp" xmlns.

    Args:
        udi (str): UDI of device in PID:{prodID},VID:{ver},SN:{serialnum} format
        sid (str, optional): Session ID. Defaults to ''.
        usr (str, optional): Username. Defaults to ''.
        pwd (str, optional): password for provided username. Defaults to ''.

    Returns:
        str: XML element for "urn:cisco:pnp" xmlns
    """
    template = '<pnp xmlns="urn:cisco:pnp" version="1.0" {attributes_}>'
    attrs = ['udi="{udi_}"'.format(udi_=udi)]
    if sid:
        attrs.append('sid="{sid_}"'.format(sid_=sid))
    if usr and pwd:
        attrs.append('usr="{usr_}" pwd="{pwd_}"'.format(usr_=usr, pwd_=pwd))
    return template.format(attributes_=(' '.join(attrs)))


def _gen_info_elem(correlator):
    """Generates the info element for the "urn:cisco:pnp:work-info" xmlns.

    Args:
        correlator (str): "request ID" generated by PnP Agent to track PnP
            Handshake

    Returns:
        str: XML element for "urn:cisco:pnp:work-info" xmlns
    """
    template = '<info xmlns="urn:cisco:pnp:work-info" correlator="{corr}">'
    return template.format(corr=correlator)


def _gen_deviceid_elem(udi, auth, **kwargs):
    """Generates the deviceId element.

    Args:
        udi (str): device UDI in PID:{productID},VID:{ver},SN:{serialnum} format
        auth (bool): True if User Authentication is required
        **kwargs:
            hostname (str): hostname of device, default: "None"
            macaddr (str): MAC address of device
            proxy (bool): True if connecting via proxy
            secadvise (str): security advise message

    Returns:
        str: XML element and child elements for deviceId.
    """
    template = '{deviceid_xml_}'
    deviceid_data = {
        'deviceId': {
            'udi': udi,
            'authRequired': str(auth).lower(),
        }
    }
    if 'hostname' in kwargs:
        deviceid_data['deviceId'].update({'hostname': kwargs['hostname']})
    else:
        deviceid_data['deviceId'].update({'hostname': 'None'})
    if 'sudi' in kwargs:
        deviceid_data['deviceId'].update({'SUDI': kwargs['sudi']})
    if 'macaddr' in kwargs:
        deviceid_data['deviceId'].update({'macAddress': kwargs['macaddr']})
    if 'proxy' in kwargs:
        proxy = str(kwargs['proxy']).lower()
        deviceid_data['deviceId'].update({'viaProxy': proxy})
    if 'secadvise' in kwargs:
        secadvise = kwargs['secadvise']
        deviceid_data['deviceId'].update({'securityAdvise': secadvise})
    deviceid_xml = XMLParser.dict_to_etree(deviceid_data)
    return template.format(deviceid_xml_=deviceid_xml)


def gen_work_request(udi, correlator, auth, **kwargs):
    """Generates the XML payload for the PnP Work-Info Request message.

    Args:
        udi (str): UDI in PID:{productID},VID:{ver},SN:{serialnum} format
        correlator (str): "request ID" generated by PnP Agent to track PnP
            Handshake
        auth (bool): True if User Authentication is required
        **kwargs:
            sid (str): Session ID
            usr (str): username
            pwd (str): password for provided username
            hostname (str): hostname of device, defaults to "None"
            macaddr (str): MAC address of device
            proxy (bool): True if connecting via proxy
            secadvise (str): security advise message

    Returns:
        str: XML payload for Work-Info request
    """
    template = ('<?xml version="1.0" encoding="UTF-8"?>{pnp}{info}'
                '{deviceid}</info></pnp>')
    pnp_elem = _gen_pnp_elem(udi, kwargs.get('sid'), kwargs.get('usr'),
                             kwargs.get('pwd'))
    info_elem = _gen_info_elem(correlator)
    deviceid_elem = _gen_deviceid_elem(udi, auth, **kwargs)
    return template.format(pnp=pnp_elem, info=info_elem, deviceid=deviceid_elem)


def _gen_response_data_xml(response_data):
    """Generates response element's child elements which are populated by the
    service response data

    Args:
        response_data -- (dict) object generated from service.get_response()

    Returns:
        str: XML element and child elements for service response
    """
    template = '{response_elem}'
    if len(response_data) == 1:
        response_xml = XMLParser.dict_to_etree(response_data)
    elif len(response_data) > 1:
        # Needed for response_data that has multiple top-level keys like the one
        # generated by device-info service
        temp_data = {'temp': response_data}
        response_xml = XMLParser.dict_to_etree(temp_data)
        response_xml = response_xml.replace('<temp>', '')
        response_xml = response_xml.replace('</temp>', '')
        response_xml = response_xml.replace('<temp />', '')
    else:
        return ''
    return template.format(response_elem=response_xml)


def _gen_error_info_xml(error_info):
    if not error_info:
        return ''
    template = ("<errorInfo><errorSeverity>{severity}</errorSeverity>"
                "<errorCode>{code}</errorCode>"
                "<errorMessage>{message}</errorMessage></errorInfo>")
    # Escape any characters in error message that can be problematic for string
    # formatting or XML payloads
    xml_escaped_msg = escape_xml(error_info.message)
    sanitized_msg = xml_escaped_msg.replace('{', '{{').replace('}', '}}')
    return template.format(severity=error_info.severity, code=error_info.code,
                           message=sanitized_msg)


def _gen_service_log_xml(service_log):
    """Generates the XML service log element

    Args:
        service_log (str): the service log text string to be formatted
        into XML

    Returns:
        (str): the XML encapsulated service log content
    """
    if not service_log:
        return ''
    # Escape any characters in error message that can be problematic for string
    # formatting or XML payloads
    xml_escaped_msg = escape_xml(service_log)
    sanitized_msg = xml_escaped_msg.replace('{', '{{').replace('}', '}}')
    template = "<serviceLog>{log}</serviceLog>"
    return template.format(log=sanitized_msg)


def _gen_response_elem(correlator, service):
    """Generates the XML response element and child elements

    Args:
        correlator -- (string) "request ID" generated by PnP Agent to track
                        PnP Handshake
        service_name -- (string) PnP Service that was requested by PnP Server

    Returns:
        str: XML element and child elements for response.
    """
    template = ('<response xmlns="{service_xmlns}" success="{success_}" '
                'correlator="{correlator_}"')
    service_name = service.name
    service_name = service_name.replace('_', '-')
    service_namespace = 'urn:cisco:pnp:{service}'.format(service=service_name)
    response_xml = _gen_response_data_xml(service.response)
    error_xml = _gen_error_info_xml(service.error_info)
    servicelog_xml = _gen_service_log_xml(service.exec_output_log)
    # close response tag if there are no child elements
    if response_xml or error_xml or servicelog_xml:
        template += '>{response}{err}{svclog}</response>'.format(
            response=response_xml, err=error_xml, svclog=servicelog_xml)
    else:
        template += '/>'
    return template.format(service_xmlns=service_namespace,
                           success_=service.success,
                           correlator_=correlator)


def gen_work_response(service, udi, correlator, **kwargs):
    """Generates the XML payload for the PnP Work Response message

    Args:
        service (PnPService): instance of PnPService class
        udi (str): UDI in PID:{productID},VID:{ver},SN:{serialnum} format
        correlator (str): "request ID" generated by PnP Agent to track
                        PnP Handshake
        **kwargs:
            sid (str): Session ID
            usr (str): username
            pwd (str): password for provided username

    Returns:
        str: XML payload for Work-Response message
    """
    template = '<?xml version="1.0" encoding="UTF-8"?>{pnp}{response}</pnp>'
    pnp_elem = _gen_pnp_elem(udi, kwargs.get('sid'), kwargs.get('usr'),
                             kwargs.get('pwd'))
    response_elem = _gen_response_elem(correlator, service)
    return template.format(pnp=pnp_elem, response=response_elem)


def _gen_fault_response_elem(correlator, fault_info):
    """Generates the XML response element and child elements

    Args:
        correlator (str): "request ID" generated by PnP Agent to track
            PnP Handshake.
        fault_info (FaultInfo): An object of class FaultInfo to capture the
            info of a generated fault

    Returns:
        str: XML element and child elements for response.
    """
    template = ('<response xmlns="urn:cisco:pnp:fault" '
                'correlator="{correlator_}">{fault_xml}</response>')

    if fault_info.details:
        fault_template = ("<fault><faultcode>{code}</faultcode>"
                          "<faultstring>{strng}</faultstring>"
                          "<detail>%s</detail></fault>"
                          %fault_info.details)
    else:
        fault_template = ("<fault><faultcode>{code}</faultcode>"
                          "<faultstring>{strng}</faultstring></fault>")

    resp_xml = fault_template.format(code=fault_info.code,
                                     strng=fault_info.string)
    return template.format(correlator_=correlator, fault_xml=resp_xml)


def gen_fault_response(fault_info, udi, correlator, **kwargs):
    """Generates the XML payload for the PnP Work Response with a fault
    message

    Args:
        fault_info (FaultInfo): An object of class FaultInfo to capture the
            info of a generated fault. Its being not None is verified &
            guaranteed by the caller
            udi (str): UDI in PID:{productID},VID:{ver},SN:{serialnum} format
        correlator (str): "request ID" generated by PnP Agent to track
            PnP Handshake
        **kwargs:
            sid (str): Session ID
            usr (str): username
            pwd (str): password for provided username

    Returns:
        str: XML payload for Work-Response message
    """
    template = '<?xml version="1.0" encoding="UTF-8"?>{pnp}{response}</pnp>'
    pnp_elem = _gen_pnp_elem(udi, kwargs.get('sid'), kwargs.get('usr'),
                             kwargs.get('pwd'))
    response_elem = _gen_fault_response_elem(correlator, fault_info)
    return template.format(pnp=pnp_elem, response=response_elem)
