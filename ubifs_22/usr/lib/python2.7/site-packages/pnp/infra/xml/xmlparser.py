################################################################################
# Copyright (c) 2015-17 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Tai Pham <taipham@cisco.com>
################################################################################
"""XML Parsing Library

Contains XMLParser class, which handles XML parsing and conversion. XMLParser
can convert XML to a JSON-style dict. Since no 1 to 1 mapping exists between
JSON and XML, the following convention is used:

Pattern  XML                           JSON
1    <e/>                              "e": null
2    <e>text</e>                       "e": "text"
3    <e name="value" />                "e":{"@name": "value"}
4    <e name="value">text</e>          "e":{"@name": "value", "#text": "text"}
5    <e> <a>text</a> <b>text</b> </e>  "e": { "a": "text", "b": "text" }
6    <e> <a>text</a> <a>text</a> </e>  "e": { "a": ["text", "text"] }
7    <e> text <a>text</a> </e>         "e": { "#text": "text", "a": "text" }

"""
from collections import defaultdict
from xml.etree import cElementTree as ET


class XMLParser(object):
    """XML Parsing Library"""

    @staticmethod
    def remove_namespace(doc, request):
        """Remove namespace in the passed document in place.

        Args:
            doc (xml.etree.ElementTree.Element): XML Element to remove namespace
                from
            request (str): pnp request name used to generate xml namespace

        """
        namespace = 'urn:cisco:pnp:{service_name}'.format(service_name=request)
        ns = u'{%s}' % namespace
        nsl = len(ns)
        for elem in doc.iter():
            if elem.tag.startswith(ns):
                elem.tag = elem.tag[nsl:]

    @classmethod
    def etree_to_dict(cls, t):
        """Convert element tree to dictionary.

        Notes:
            This is a recursive classmethod call.

            A convention is used to convert the ElementTree to a JSON-style
            dictionary.

        Args:
            t (xml.etree.ElementTree.Element): XML Element to convert to dict

        Returns:
            dict: Dictionary created from the provided XML ElementTree

        """
        d = {t.tag: {} if t.attrib else None}
        children = list(t)
        if children:
            dd = defaultdict(list)
            for dc in map(cls.etree_to_dict, children):  # pylint: disable=bad-builtin
                for k, v in dc.iteritems():
                    dd[k].append(v)
            d = {t.tag: {k:v[0] if len(v) == 1 else v for k, v in dd.iteritems()}}  # pylint: disable=line-too-long
        if t.attrib:
            d[t.tag].update(('@' + k, v) for k, v in t.attrib.iteritems())
        if t.text:
            text = t.text.strip()
            if children or t.attrib:
                if text:
                    d[t.tag]['#text'] = text
            else:
                d[t.tag] = text
        return d

    @staticmethod
    def dict_to_etree(d):
        """Convert JSON-style dictionary to XML ElementTree.

        Notes:
            A convention is used to convert the JSON-style dictionary to an XML
            ElementTree

        Args:
            d (dict): JSON-style dictionary to convert to XML ElementTree

        Returns:
            str: Encoded string containing the XML data which was converted from
                the provided dictionary.

        """
        def _to_etree(d, root):
            if not d:
                pass
            elif isinstance(d, basestring):
                root.text = d
            elif isinstance(d, dict):
                for k, v in d.items():
                    if k.startswith('#'):
                        root.text = v
                    elif k.startswith('@'):
                        root.set(k[1:], str(v))
                    elif isinstance(v, list):
                        for e in v:
                            _to_etree(e, ET.SubElement(root, k))
                    else:
                        _to_etree(v, ET.SubElement(root, k))
            elif isinstance(d, int):
                root.text = str(d)
            elif isinstance(d, list):
                for e in d:
                    _to_etree(e, root)
        tag, body = next(iter(d.items()))
        node = ET.Element(tag)
        _to_etree(body, node)
        return ET.tostring(node)
