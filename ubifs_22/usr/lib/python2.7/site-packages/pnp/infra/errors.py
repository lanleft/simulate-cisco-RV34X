################################################################################
# Copyright (c) 2015-17 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Shaurin Desai <shaurdes@cisco.com>
################################################################################
""" PnP Errors

This file contains Exceptions, ErrorInfo classes, and error constants that are
relevant to other pnp submodules.

"""
import pnp.infra.utils.pnp_constants as consts

SEVERITY_WARNING = 'WARNING'
SEVERITY_ERROR = 'ERROR'


class PnPProfileError(Exception):
    """PnP Profile Error (inherits from Exception)"""
    pass


class PnPConnError(Exception):
    """PnP Connection Error (inherits from Exception)"""
    pass


class ErrorInfo(object):
    """ErrorInfo base class
    """
    __severity = None
    __code = None
    __message = None

    def __init__(self, name, sev, code_, msg, error_codes): # pylint: disable=too-many-arguments
        self._name = name
        self._error_codes = error_codes
        self.severity = sev
        self.message = msg
        self.code = code_

    @property
    def severity(self):
        """str: Severity level for information (either 'ERROR' or 'WARNING')

        Raises:
            ValueError: If set to value other than 'ERROR' or 'WARNING'

        """
        return self.__severity

    @severity.setter
    def severity(self, severity_):  # pylint: disable=missing-docstring
        if severity_.upper() not in (SEVERITY_ERROR, SEVERITY_WARNING):
            raise ValueError("severity must be 'error' or 'warning'")
        self.__severity = severity_.upper()

    @property
    def code(self):
        """str: Error code from one of error code tuples defined in this module.

        Raises:
            ValueError: If an unexpected error code provided.

        """
        return self.__code

    @code.setter
    def code(self, code_):  # pylint: disable=missing-docstring
        if code_ not in self._error_codes[self._name]:
            raise ValueError("code expects a supported error code")
        if isinstance(self._error_codes[self._name], dict):
            self.__code = self._error_codes[self._name][code_]
        else:
            self.__code = code_

    @property
    def message(self):
        """str: Human-readable message that describes the error or warning.

        Raises:
            ValueError: If an empty string is provided

        """
        return self.__message

    @message.setter
    def message(self, message_):  # pylint: disable=missing-docstring
        if not message_.strip():
            raise ValueError("message expects a non-empty string")
        self.__message = message_

    def __str__(self):
        string = "Error Info:\nName:{0}\nSeverity:{1}\nCode:{2}\nMessage:{3}"
        return string.format(self._name, self.code, self.severity, self.message)


class InfraErrorInfo(ErrorInfo):
    """PnP Infra ErrorInfo
    """
    def __init__(self, name, sev, code_, msg):
        if name != '' and name not in consts.PNP_INFRA_API_LIST:
            name = ''
        super(InfraErrorInfo, self).__init__(name, sev, code_, msg,
                                             _INFRA_ERROR_CODES)

DEFAULT_API_ERRORS = (
    'INTERNAL',
    'UNSUPPORTED'
)

# Clock Sync API: set_system_clock() and set_ntp_server() error codes
CLOCK_SYNC_API_ERRORS = (
    'INTERNAL',
    'CLOCK_SYNC_UNSUPPORTED',
    'CLOCK_SYNC_SET_SYSTEM_CLOCK_FAILED',
    'CLOCK_SYNC_NTP_UNSUPPORTED',
    'CLOCK_SYNC_NTP_CONFIG_ERROR',
    'CLOCK_SYNC_NTP_SYNC_ERROR',
    'REQ'
)

# Device API: load_device_info() error codes
DEVICE_INFO_API_ERRORS = (
    'INTERNAL',  # 1600
    'DEVICE_INFO_UNSUPPORTED',  # 1601
    'DEVICE_INFO_MALLOC',  # 1602
    'DEVICE_HARDWARE_INFO_MALLOC',  # 1603
    'DEVICE_IMAGE_INFO_MALLOC',  # 1604
    'DEVICE_INFO_QUEUE_MALLOC',  # 1605
    'DEVICE_INFO_FILESYS_QUEUE_MALLOC',  # 1606
    'DEVICE_IMAGE_INFO_RETRIEVE',  # 1607
    'DEVICE_HARDWARE_INFO_RETRIEVE',  # 1608
    'DEVICE_FILESYSTEM_INFO_RETRIEVE',  # 1609
    'DEVICE_INFO_RESPONSE_OBJECT_MALLOC',  # 1610
    'REQ',  # 1611
    'DEVICE_IMAGE_HW_INFO_RETRIEVE',  # 1612
    'DEVICE_IMAGE_FILESYSTEM_INFO_RETRIEVE',  # 1613
    'DEVICE_FILESYSTEM_HW_INFO_RETRIEVE',  # 1614
    'DEVICE_IMAGE_FILESYSTEM_HW_INFO_RETRIEVE',  # 1615
    'DEVICE_UDI_INFO_MALLOC',  # 1616
    'DEVICE_PROFILE_INFO_MALLOC',  # 1617
    'DEVICE_PROFILE_INFO_RETRIEVE',  # 1618
)

# Event API: agent_terminating() and profile_updated() error codes
EVENT_API_ERRORS = (
    'INTERNAL',
    'UNSUPPORTED',
    'EVENT_AGENT_TERMINATING_FAILED',
    'EVENT_PROFILE_UPDATED_FAILURE',
)

# SUDI API: get_sudi() and challenge_sudi() error codes
SUDI_API_ERRORS = (
    'DEVICE_AUTH_MALLOC',  # 3400
    'DEVICE_AUTH_EN_HASH_UNAVAILABLE',  # 3401
    'REQ',  # 3402
    'DEVICE_AUTH_TP_NAME_RETRIEVAL_FAILED',  # 3403
    'DEVICE_AUTH_PKI_SESSION_START_FAILED',  # 3404
    'DEVICE_AUTH_KEYPAIR_GET_FAILED',  # 3405
    'DEVICE_AUTH_PKI_SIGN_FAILED',  # 3406
    'DEVICE_AUTH_CERT_RETRIEVAL_FAILED',  # 3407
    'DEVICE_AUTH_ENCODING_FAILED',  # 3408
    'DEVICE_AUTH_INVALID_ENCRYPTION_METH',  # 3409
    'DEVICE_AUTH_INVALID_HASH_METH',  # 3410
    'DEVICE_AUTH_UNSUPPORTED',  # 3411
    'INTERNAL'
)

USER_AUTH_API_ERRORS = (
    'INTERNAL',
    'UNSUPPORTED'
)

VRF_API_ERRORS = (
    'INTERNAL',
    'UNSUPPORTED'
)

SCRIPT_EXEC_API_ERRORS = (
    'INTERNAL',
    'UNSUPPORTED',
    'EXEC_FAILED',
    'FILE_OPEN_FAILED',
    'UNABLE_TO_CREATE_FILE_IMG',
    'FILE_READ_FAILED',
    'UNEXPECTED_FILE_TYPE',
    'UNKNOWN_ERROR',
    'REQ'
)

VBOND_API_ERRORS = (
    'INTERNAL',
    'UNSUPPORTED',
    'VDAEMON_UNAVAILABLE',
    'VBOND_UNREACHABLE',
    'VBOND_CERT_NOT_FOUND',
    'VBOND_DTLS_FAILURE'
)

_INFRA_ERROR_CODES = {
    '': DEFAULT_API_ERRORS,
    consts.PNP_INFRA_CLOCKSYNC: CLOCK_SYNC_API_ERRORS,
    consts.PNP_INFRA_DEVICE: DEVICE_INFO_API_ERRORS,
    consts.PNP_INFRA_EVENT: EVENT_API_ERRORS,
    consts.PNP_INFRA_SUDI: SUDI_API_ERRORS,
    consts.PNP_INFRA_USERAUTH: USER_AUTH_API_ERRORS,
    consts.PNP_INFRA_VRF: VRF_API_ERRORS,
    consts.PNP_INFRA_SCRIPTEXEC: SCRIPT_EXEC_API_ERRORS,
    consts.PNP_INFRA_VBOND: VBOND_API_ERRORS
}
