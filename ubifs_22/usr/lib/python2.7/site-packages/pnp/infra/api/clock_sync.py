# pylint: disable=unused-argument
################################################################################
# Copyright (c) 2015-17 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Shaurin Desai <shaurdes@cisco.com>
################################################################################
"""PnP Infra API: Clock Synchronization

This file serves as the Clock Synchronization API signature.

This API is mandatory to implement for all platforms. Without this API
implementation in place, the PnP Agent may fail to establish an HTTPS connection
(due to certificate validation period).

Note:
    Clock sync can be requested during PnP Discovery and by PnP Services (e.g.
    Certificate-Install or Redirection).

"""
from pnp.infra.api.pnp_infra import PnPInfra
from pnp.infra.errors import SEVERITY_WARNING


class ClockSync(PnPInfra):
    """PnP Infra API: Clock Sync

    Useful methods and attributes inherited from PnPInfra:
        * logger: Logger to be used for logging by PnP Infra API implementation.
        * set_error_info(): Method to be used by PnP Infra API implementation
            for reporting error/warning information.

    """

    @classmethod
    def set_system_clock(cls, year, month, day, hour, minute, second):
        """Sets the system clock to the provided time.

        Args:
            year (int): year to set (min: 1993, max: 2035)
            month (str): month to set
            day (int): day to set (min: 1, max: 31)
            hour (int): hour to set (min: 0, max: 23)
            minute (int): minute to set (min: 0, max: 59)
            second (int): second to set (min: 0, max: 59)

        Returns:
            bool: True, if API call results in successful system clock setting.
                False, otherwise.

        """
        cls.logger.debug("Failed to set system clock")
        cls.set_error_info(SEVERITY_WARNING, 'CLOCK_SYNC_UNSUPPORTED',
                           "API implementation not found")
        return False

    @classmethod
    def set_ntp_server(cls, ntp_server_addr):
        """Blocking call for configuring the system NTP client with the provided
        NTP server address and for performing sync operation through NTP.

        Args:
            ntp_server_addr (str): NTP server address (IP Address or FQDN)

        Returns:
            bool: True, if NTP client is successfully configured and synced with
                an NTP Server. False, otherwise.
        """
        cls.logger.debug("Failed to configure NTP Server: %s", ntp_server_addr)
        cls.set_error_info(SEVERITY_WARNING, 'CLOCK_SYNC_NTP_UNSUPPORTED',
                           "API implementation not found")
        return False
