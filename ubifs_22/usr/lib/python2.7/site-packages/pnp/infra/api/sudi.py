# pylint: disable=unused-argument,unused-variable
################################################################################
# Copyright (c) 2015-17 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Shaurin Desai <shaurdes@cisco.com>
################################################################################
"""PnP Infra API: SUDIh

This file serves as the SUDI API signature.

This API is mandatory to implement for platforms with the hardware capability.
Without this API implementation in place, the PnP Agent will not be able to
perform Device Authentication for the PnP Server.

Note:
    SUDI API relies on the ACT2 hardware being present on the system. The ACT2
    library is usually only available as C code, so it is likely a wrapper is
    required for the pnp_platform to interface with ACT2.

Todo:
    * Update API to add support for MIC

    * Update API to add support for getting the SUDI cert and keyfile

"""
from pnp.infra.api.pnp_infra import PnPInfra
from pnp.infra.errors import SEVERITY_WARNING


class SUDI(PnPInfra):
    """PnP Infra API: SUDI

    Useful methods and attributes inherited from PnPInfra:
        * logger: Logger to be used for logging by PnP Infra API implementation.
        * set_error_info(): Method to be used by PnP Infra API implementation
            for reporting error/warning information.

    """

    #: (str): Secure Unique Device Identification value
    _sudi = ''

    @classmethod
    def sudi(cls):
        """Called by the Agent when the Secure Unique Device Identification is
        needed. This call is made by the PnP Agent for each PnP Handshake, so
        the first call to this method should store the sudi value in the class
        attribute.

        Returns:
            str: UDI extracted from SUDI Certificate. Accepted Secure UDI string
                formats: "PID:<PID> SN:<SN>" or "PID:<PID>,SN:<SN>"

        """
        # should populate the _sudi attribute upon first call
        if not cls._sudi:
            cls._sudi = ''  # set value here
        cls.set_error_info(SEVERITY_WARNING, 'DEVICE_AUTH_UNSUPPORTED',
                           "API implementation not available")
        return cls._sudi

    @classmethod
    def challenge_sudi(cls, challenge_string, encryption_methods, hash_methods):
        """Called by the PnP Service: Device-Authentication, this method serves
        as the interface for sending a challenge string from the PnP Server to
        the PnP-enabled device, so that the PnP Server can verify that the
        device UDI has not been tampered and is a genuine Cisco device.

        Args:
            challenge_string (str): Challenge string sent by PnP Server.
            encryption_methods (list(str)): List of encryption methods supported
                by the PnP Server.
            hash_methods (list(str)): List of hash methods supported by the PnP
                Server.

        Returns:
            dict: Empty dict upon error. SUDI Response dictionary with the
                following key-value pairs:
                    challenge_response (str): Base-64 encoded string created
                        after challenge_string has been hashed and then
                        encrypted by the SUDI private key.
                    sudi_cert (str): Base-64 encoded string containing the
                        PEM-encoded SUDI-certificate.
                    encryption_method (str): Encryption method used.
                    hash_method (str): Hash method used.

        """
        sudi_response = {
            'challenge_response': '',  # base64(sudi-priv-key(hash(challenge)))
            'sudi_cert': '',  # base64(sudi_cert_pem)
            'encryption_method': '',
            'hash_method': ''
        }
        cls.set_error_info(SEVERITY_WARNING, 'DEVICE_AUTH_UNSUPPORTED',
                           "API implementation not available")
        return {}

    # Enhancement: API Proposal (implementation NOT required as of now)
    @classmethod
    def _sudi_cert_file(cls):
        """Provides the SUDI private key and corresponding certificate.

        Returns:
            dict: Empty dict upon error. SUDI cert file response with the
                following key-value pairs:
                    certfile (str): Path to a single file in PEM format
                        containing the certificate as well as any number of CA
                        certificates needed to establish the certificate's
                        authenticity.
                    keyfile (str, optional): If present, must point to a file
                        containing the private key. Otherwise the private key
                        will be taken from certfile.
                    password (optional): Function to call to get the password
                        for decrypting the private key. It will only be called
                        if the private key is encrypted and a password is
                        necessary. Function will be called with no arguments,
                        and it should return a string, bytes, or bytearray. If
                        the return value is a string it will be encoded as utf-8
                        before using it to decrypt the key. Alternatively a
                        string, bytes, or bytearray value may be supplied
                        directly as the password argument. It will be ignored if
                        the private key is not encrypted and no password is
                        provided.

        """
        cert_file = {
            'certfile': '',
            'keyfile': '',
            'password': ''
        }
        cls.set_error_info(SEVERITY_WARNING, 'DEVICE_AUTH_UNSUPPORTED',
                           "API implementation not available")
        return {}
