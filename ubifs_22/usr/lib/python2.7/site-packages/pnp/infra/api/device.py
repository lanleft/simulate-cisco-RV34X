# pylint: disable=unused-variable
################################################################################
# Copyright (c) 2015-17 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Shaurin Desai <shaurdes@cisco.com>
################################################################################
"""PnP Infra API: Device

This file serves as the Device API signature.

This API serves as the interface for communicating PnP Device details to the PnP
Agent. It is relied upon by the PnP Agent, PnP Services, and other PnP infra
components.

Note:
    Some calls to this API will query for static information (e.g. UDI), while
    others will query for dynamic data (free space on filesystem). It can be
    useful to store the static information in class attributes in order to avoid
    additional I/O with the system.

Todo:
    * Update API to support non IOS-specific keys/values (Server changes needed)

"""
from pnp.infra.api.pnp_infra import PnPInfra
from pnp.infra.errors import SEVERITY_WARNING


class Device(PnPInfra):
    """PnP Infra API: Device

    Useful methods and attributes inherited from PnPInfra:
        * logger: Logger to be used for logging by PnP Infra API implementation.
        * set_error_info(): Method to be used by PnP Infra API implementation
            for reporting error/warning information.

    """

    _udi = dict()
    _hardware_info = dict()
    _image_info = dict()

    @classmethod
    def udi(cls):
        """Provides UDI information for primary-chassis, any stacked switch, and
        standby HA device.

        Returns:
            dict: Dictionary with UDI values in the following format:
                {
                    'primary-chassis': 'UDI (str)',  # mandatory key-value pair
                    'stacked-switch': [  # optional key-val pair for each switch
                        {'member-udi': ['UDI (str)', {'@slot': (int)}]},
                        ...
                    ],
                    'ha-device': [  # optional key-val pair for each standby
                        {'standby-udi': 'UDI (str)'},
                        ...
                    ]
                }
                UDI string format: "PID:<PID>,VID:<VID>,SN:<SN>"

        """
        # should populate the _UDI attribute upon first call
        if not cls._udi:
            cls._udi = dict()  # set value here
        cls.set_error_info(SEVERITY_WARNING, 'DEVICE_INFO_UNSUPPORTED',
                           "API implementation not found")
        return cls._udi

    @classmethod
    def filesystem_info(cls):
        """Provides current status of filesystem(s) present on the system. Since
        this function provides dynamic values, the return value should NOT be
        stored in an attribute for future method calls.

        Returns:
            list(dict): List of dictionaries in the following format:
                [{'fileSystem':
                    {
                        '@writable': (str), # possible values: 'true' or 'false'
                        '@type': (str),  # possible values: 'flash' or 'nvram'
                        '@size': (int),  # size in bytes
                        '@readable': (str), # possible values: 'true' or 'false'
                        '@name': (str),  # values: 'bootflash' or 'nvram'
                        '@freespace': (int)  # free space in bytes
                    }
                }, ...]

        """
        cls.set_error_info(SEVERITY_WARNING, 'DEVICE_INFO_UNSUPPORTED',
                           "API implementation not found")
        return []

    @classmethod
    def hardware_info(cls):
        """Provides information on the device's hardware. Some hardware info
        fields may not be relevant to all platforms.

        Returns:
            dict: Dictionary must contain the following key-value pairs:
                hardware_info_dict = {
                    'hostname': (str, optional),
                    'vendor': (str, optional),
                    'platformName': (str, optional),
                    'processorType': (str, optional),
                    'hwRevision': (str, optional),
                    'mainMemSize': (int, optional),
                    'ioMemSize': (int, optional),
                    'boardId': (int, optional),
                    'boardReworkId': (str, optional),
                    'processorRev': (str, optional),
                    'midplaneVersion': (str, optional),
                    'location': (str, optional),
                    'deviceType': (str, optional)  # possible values: 'AP','ME'
                    'deviceModel': (str, optional)  # required for AP & ME
                }

        """
        # should populate the _hardware_info attribute upon first call
        if not cls._hardware_info:
            hardware_info_keys = ['hostname', 'vendor', 'platformName',
                                  'processorType', 'hwRevision', 'mainMemSize',
                                  'ioMemSize', 'boardId', 'boardReworkId',
                                  'processorRev', 'midplaneVersion', 'location',
                                  'deviceType', 'deviceModel']
            cls._hardware_info = dict()  # dict().fromkeys(hardware_info_keys)
        cls.set_error_info(SEVERITY_WARNING, 'DEVICE_INFO_UNSUPPORTED',
                           "API implementation not found")
        return cls._hardware_info

    @classmethod
    def image_info(cls):
        """Provides information on the device's current image. Some image info
        fields may not be relevant to all platforms. The image version, or OS
        version, MUST be included in the return dictionary.

        Returns:
            dict: Dictionary must contain the following key-value pairs:
                image_info_dict = {
                    'versionString': (str),  # OS version
                    'imageFile': (str, optional),
                    'imageHash': (str, optional),
                    'returnToRomReason': (str, optional),
                    'bootVariable': (str, optional),
                    'bootLdrVariable': (str, optional),
                    'configVariable': (str, optional),
                    'configReg': (str, optional),
                    'configRegNext': (str, optional)
                }

        """
        # should populate the _image_info attribute upon first call
        if not cls._image_info:
            image_info_keys = ['versionString', 'returnToRomReason',
                               'bootVariable', 'bootLdrVariable',
                               'configVariable', 'configReg', 'configRegNext',
                               'imageHash', 'imageFile']
            cls._image_info = dict()  # dict().fromkeys(image_info_keys)
        cls.set_error_info(SEVERITY_WARNING, 'DEVICE_INFO_UNSUPPORTED',
                           "API implementation not found")
        return cls._image_info

    @classmethod
    def get_device_info(cls):
        """Provides device information.

        Returns:
            dict: Device Info dictionary in the following format:
                {
                    'udi': (str),  # cls._udi
                    'fileSystemList': (list(dict)),  # cls.filesystem_info()
                    'hardwareInfo': (dict),  # cls._hardware_info
                    'imageInfo': (dict)  # cls._image_info
                }
        """
        device_info = {
            'udi': cls.udi(),
            'fileSystemList': cls.filesystem_info(),
            'hardwareInfo': cls.hardware_info(),
            'imageInfo': cls.image_info()
        }
        cls.set_error_info(SEVERITY_WARNING, 'DEVICE_INFO_UNSUPPORTED',
                           "API implementation not found")
        return {}
