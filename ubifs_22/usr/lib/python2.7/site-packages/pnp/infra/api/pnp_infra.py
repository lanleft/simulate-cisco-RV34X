# pylint: disable=unused-import
################################################################################
# Copyright (c) 2015-17 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Shaurin Desai <shaurdes@cisco.com>
################################################################################
"""PnP Infra API

PnPInfra serves as the interface between the PnP Agent and PnP Infrastructure
that can be platform-dependent. PnP infra components are mostly implemented as
classes that inherit from the PnPInfra class. PnPInfra subclasses should NOT
override any methods or properties provided by PnPInfra.

Note:
    Classes which inherit from PnPInfra can be implemented using staticmethods,
    classmethods, or other decorators. When implementing a new PnPInfra API,
    pnp.infra.errors must be updated with a tuple of error codes for that new
    API.

"""
from logging import getLogger

from pnp.infra.errors import InfraErrorInfo, SEVERITY_WARNING, SEVERITY_ERROR
from pnp.infra.exec_log import ExecLogInfo
from pnp.infra.objects import classproperty


class PnPInfra(object):
    """PnPInfra serves as the parent class for PnP Infra API implementations

    Classes that inherit from PnPInfra should use the provided logger property
    to perform logging operations. These inheriting classes should also report
    any unexpected behavior (errors or warnings) using the provided method:
    set_error_info().

    """
    #: (InfraErrorInfo): Infra API error information. When a PnP infra API call
    # returns without any error or warning information to report, this attribute
    # should remain None
    error_info = None
    exec_log = ExecLogInfo()

    @classproperty
    def logger(cls):    # pylint: disable=no-self-argument
        """logging.Logger: Logger for PnP Infra API implementations."""
        return getLogger('pnp.infra.api').getChild(cls.__name__)  #pylint: disable=no-member

    @classmethod
    def set_error_info(cls, severity='ERROR', code='INTERNAL', msg=''):
        """Populates the error_info attribute with the provided error info. This
        method MUST be called upon any PnP Infra API call failure. If an API
        call succeeds, this method can be used to provide an error or warning
        info. Each call to this method will result in a complete overwrite of
        the error_info attribute.

        Args:
            severity (str, optional): Info severity ('ERROR' or 'WARNING').
                Defaults to 'ERROR' severity level.
            code (str, optional): One of the error codes found in the module
                pnp.infra.errors. Defaults to 'INTERNAL'.
            msg: (str, optional): Human readable message that describes the
                error/warning. Very import for debugging.

        """
        if not msg:
            msg = "PnPInfra API (%s) call failed" % cls.__name__
        cls.error_info = InfraErrorInfo(cls.__name__, severity.upper(),
                                        code.upper(), msg)

    @classmethod
    def set_exec_output_log(cls, log_):
        """This class method populates the given exec output log into the
        the exec_log attribute.

        Args:
            log_ (str): This is the exec output log to be set into attribute
        """
        cls.exec_log.output_log = log_

    @classmethod
    def get_exec_output_log(cls):
        """This class method retrieved the exec output log saved in the
        the exec_log attribute.

        Returns:
            (str): The exec output log saved earlier in the attribute
        """
        return cls.exec_log.output_log

    @classmethod
    def set_exec_error_log(cls, log_):
        """This class method populates the given exec error log into the
        the exec_log attribute.

        Args:
            log_ (str): This is the exec error log to be set into attribute
        """
        cls.exec_log.error_log = log_

    @classmethod
    def get_exec_error_log(cls):
        """This class method retrieved the exec error log saved in the
        the exec_log attribute.

        Returns:
            (str): The exec error log saved earlier in the attribute
        """
        return cls.exec_log.error_log
