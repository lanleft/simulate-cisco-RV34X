################################################################################
# Copyright (c) 2015-17 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Xinsheng Fang <xinsfang@cisco.com>
################################################################################
"""PnP Service: Config-Upgrade

"""
import re
import subprocess
from hashlib import md5
import xml.etree.ElementTree as ET

from pnp_platform.utils.utilities import download_cmd, reboot_action, save_config_cmd

from pnp.service.api.pnp_service import PnPService, ServiceAction
from pnp.infra.utils.pnp_utils import load_platform_info


class ConfigUpgrade(PnPService):
    """Config-Upgrade
    """
    pid = load_platform_info().get('pid', '')
    apply_to = ''
    uri = ''
    checksum = ''

    need_reload = False
    reload_delay_in = ''
    reload_save_config = ''
    reload_reason = ''
    reload_user = ''

    full_name = ''

    def run(self):
        assert self.pid
        try:
            source = self.request['config']['copy']['source']
            self.apply_to = self.request['config']['copy'].get('applyTo', 'startup')
            self.uri = source.get('location') or source.get('uri')
            self.checksum = source.get('checksum')

            if self.request['reload']:
                self.need_reload = True
                self.reload_reason = self.request['reload'].get('reason', 'unknown')
                self.reload_delay_in = self.request['reload'].get('delay_in', '20')
                self.reload_user = self.request['reload'].get('user', 'unknown')
                self.reload_save_config = self.request['reload'].get('save_config', True)
                self.logger.debug("reload reason: %s", self.reload_reason)
                self.logger.debug("reload delay: %s", self.reload_delay_in)
                self.logger.debug("reload user: %s", self.reload_user)
                self.logger.debug("reload save_config: %s", self.reload_save_config)

            self.logger.info("source uri: %s", self.uri)
            self.logger.info("checksum: %s", self.checksum)
        except KeyError as err:
            self.logger.error('config-upgrade error accessing location' + str(err))
            self.success = 0
            return
        try:
            cmd = save_config_cmd()
            retcode = subprocess.call(cmd, shell=True)
            if retcode != 0:
                self.logger.error("unable to save config")
                self.success = 0
                self.set_error_info(severity='ERROR', code='STARTUP_CFG_COPY_FAILED',
                                    msg='PnP - Error save config')
                return
            (cmd, full_name) = download_cmd(self.uri)
            self.full_name = full_name
            self.logger.info("Download cli: " + cmd)
            ret = subprocess.call(cmd, shell=True)
            if ret != 0:
                self.logger.error("unable to download config")
                self.success = 0
                self.set_error_info(severity='ERROR', code='APPLY_CFG_COPY_FAILED',
                                    msg='PnP - Error download config')
                return
            md5sum = md5(open(self.full_name, 'rb').read()).hexdigest()
            self.logger.info("md5sum is "+ md5sum)
            if self.checksum and md5sum != self.checksum:
                self.logger.info("checksum does not match")
                self.success = 0
                self.set_error_info(severity='ERROR', code='INTERNAL',
                                    msg='Checksum mismatch!')
                return
            cmd = self.__config_upgrade_cmd()
            self.logger.info("Will do config upgrade. cmd: " + cmd)
            proc = subprocess.Popen(cmd, shell=True,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.STDOUT,
                                    stdin=subprocess.PIPE)
            stdout, _ = proc.communicate()
            retcode = proc.poll()
            self.logger.info("stdout is: " + stdout)
            self.logger.debug("retcode is: " + str(retcode))
            if retcode or re.search('error', stdout, flags=re.IGNORECASE):
                self.logger.error("unable to apply config")
                self.success = 0
                self.set_error_info(severity='ERROR', code='APPLY_CFG_REQ_ERROR',
                                    msg='PnP - Error apply config')
                return
            if self.need_reload:
                self.logger.info("Will reboot system in " +  str(self.reload_delay_in))
                action_args = [self.pid, self.reload_delay_in]
                self.action = ServiceAction(reboot_action, 'reboot', *action_args)
            self.success = 1
        except Exception as err: #pylint: disable=broad-except
            self.logger.exception("Config Upgrade failed")
            self.success = 0

    def __rv340_config_upgrade(self):
        """rv340 config upgrade"""
        if self.apply_to == 'startup':
            strategy = 'replace'
            copy_to_startup = 'config_mgmt.sh copy config-running config-startup'
        else:
            strategy = 'merge'
            copy_to_startup = ''
        if not is_xml(self.full_name):
            file1 = open(self.full_name, 'r')
            buf = file1.read()
            file1.close()
            template =\
'''output=$(cat <<EOF | confd_cli -u cisco --noninteractive
configure
%(data)s
commit
exit no-confirm
exit
EOF
)

if [ $? != 0 ]; then
    echo 'commit failed'; exit 1;
fi

echo "${output}"
echo "${output}" | grep 'Aborted:.*not unique.*' > /dev/null
if [ $? = 0 ]; then
    echo 'commit aborted.'; exit 1;
fi

%(copy_to_startup)s; exit 0;

'''
            return template%{'data':buf,
                             'copy_to_startup':copy_to_startup}
        else:
            template =\
'''output=$(cat <<EOF | confd_cli -u cisco --noninteractive
configure
load %(strategy)s %(filename)s
commit
exit no-confirm
exit
EOF
)

if [ $? != 0 ]; then
    echo 'commit failed'; exit 1;
fi

echo "${output}"
echo "${output}" | grep 'Aborted:.*not unique.*' > /dev/null
if [ $? = 0 ]; then
    echo 'commit aborted.'; exit 1;
fi

%(copy_to_startup)s; exit 0;

'''
            return template%{'strategy':strategy,
                             'filename':self.full_name,
                             'copy_to_startup':copy_to_startup}


    def __config_upgrade_cmd(self):
        """config upgrade cmd"""
        return self.__rv340_config_upgrade()

def is_xml(full_name):
    """XML syntax check"""
    try:
        ET.parse(full_name)
    except ET.ParseError:
        print "XML ParseError"
        return False
    return True
