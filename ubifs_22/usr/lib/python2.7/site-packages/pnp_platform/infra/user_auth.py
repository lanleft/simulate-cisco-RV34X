################################################################################
# Copyright (c) 2015-17 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Shaurin Desai <shaurdes@cisco.com>
################################################################################
"""PnP Infra User Authentication API implementation

This implementation of the User Auth API uses an oversimplified user/password
database to authenticate users. Since the reference platform doesn't include a
full fledged configuration database, this implementation will use the "private"
attributes to store information.

"""
from pnp.infra.api.pnp_infra import PnPInfra


class UserAuth(PnPInfra):
    """PnP Infra API: User Authentication

    Useful methods and attributes inherited from PnPInfra:
        * logger: Logger to be used for logging by PnP Infra API implementation.
        * set_error_info(): Method to be used by PnP Infra API implementation
            for reporting error/warning information.

    """
    _auth_required = False

    _user_db = {
        'root': 'Cisco123',
        'user': 'password',
        'Cisco': 'Cisco',
        'admin': 'admin'
    }

    @classmethod
    def is_auth_required(cls):
        """Determines if user authentication is required. This can depend on the
        configuration state of the system.

        Returns:
            bool: True, if user authentication is required. False, otherwise.

        """
        return cls._auth_required

    @classmethod
    def authenticate_user(cls, user, password):
        """Authenticates provided user and password.

        Args:
            user (str): Username to authenticate.
            password (str): Password used to verify user identity.

        Returns:
            bool: True, if user has been authenticated. False, if provided user
                and password are not authentic.

        """
        auth_result = False
        if user in cls._user_db:
            return cls._user_db[user] == password
        return auth_result

    @classmethod
    def set_auth_required(cls):
        """Notifies platform that user authentication will be enforced by PnP.

        Returns:
            bool: True, if platform API was called successfully and User
                    Authentication has been enabled. False, otherwise.

        """
        cls._auth_required = True
        return True

    # Agent has not yet been enhanced to check user privilege. Implementation is
    # not required as of now.
    @classmethod
    def has_command_privilege(cls, user, command):
        """Determines the user privilege level for executing commands. Checks if
        the user has the privilege level to execute the specified command.

        Called in platform-dependent CLI-Exec or CLI-Config implementation. Not
        required to implement this function if platform does not support remote
        CLI execute or configure commands.

        Args:
            user (str): Username to check privilege for.
            command (str): The command that user is trying to execute.

        Returns:
            bool: True, if user has the privilege to execute the specified
                command. False, otherwise.

        """
        pass

    # Agent has not yet been enhanced enforce user privilege. Implementation is
    # not required as of now.
    @classmethod
    def get_user_privilege(cls, user):
        """Returns the user privilege level. The privilege level can be used to
        determine if user has the ability to fulfill a PnP Service request.

        Args:
            user (str): Username to fetch privilege level for

        Returns:
            int: Privilege level for specified user. Level is in range [1, 15].

        """
        pass
