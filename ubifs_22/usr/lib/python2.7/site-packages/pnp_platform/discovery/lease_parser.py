################################################################################
# Copyright (c) 2015-17 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Shaurin Desai <shaurdes@cisco.com>
################################################################################
"""PnP Discovery Lease Parser API implementation

Module contains functions for parsing DHCP lease files. It is expected that the
DHCP Client was already configured for PnP use and acquired a DHCP lease.
"""
import logging

from pnp.infra.utils.pnp_constants import PNP_ADDRTYPE_IPV4, PNP_ADDRTYPE_IPV6
from pnp.infra.utils.pnp_file_paths import filepaths

VALID_OPTIONS = ('vendor-specific-information', 'domain-name')
VALID_PROTOCOLS = (PNP_ADDRTYPE_IPV4, PNP_ADDRTYPE_IPV6)

logger = logging.getLogger(__name__)


def get_option_strings(option, protocol=PNP_ADDRTYPE_IPV4):
    """Retrieves specified option string from DHCP lease for specified protocol.

    Args:
        option (str): Name of DHCP option to retrieve.
        protocol (str, optional): Which DHCP protocol version to retrieve
            option from. For DHCPv6, stateless (SLAAC) or stateful configuration
            makes no difference to PnP. Defaults to 'ipv4'.

    Returns:
         list(str): List of option string(s) retrieved from DHCP lease(s) for
            specified option and protocol. Sequence of option strings will
            determine their precedence. Upon error, empty list is returned.

    """
    if option not in VALID_OPTIONS or protocol not in VALID_PROTOCOLS:
        return []
    logger.debug("Retrieving lease option strings for %s %s", option, protocol)
    opt_strings = []
    try:
        opt_strings.extend(_find_opt_strings(option, protocol))
    except IOError:
        logger.debug("Configured DHCP lease file not found")
    return opt_strings


def _find_opt_strings(option, protocol):
    """Parses the DHCP lease file configured in platform_paths.cfg for specified
    option string.
    """
    opt_strings = []
    # Determine which lease file to retrieve option string from based off proto
    dhcp_lease_file = ''
    if protocol == PNP_ADDRTYPE_IPV4:
        dhcp_lease_file = filepaths['discovery']['dhcpv4_leases']
    elif protocol == PNP_ADDRTYPE_IPV6:
        dhcp_lease_file = filepaths['discovery']['dhcpv6_leases']
    logger.info("Parsing DHCP lease file: %s", dhcp_lease_file)
    # Determine which option string key to search for in lease file
    opt_string = ''
    if option == 'vendor-specific-information':
        opt_string = 'option vendor-encapsulated-options '
    elif option == 'domain-name':
        opt_string = 'option domain-name '
    # Parse file for option string value
    with open(dhcp_lease_file, 'r') as lease:
        for line in reversed(lease.readlines()):
            index = line.find(opt_string)
            if index != -1:
                index += len(opt_string)
                string = line[index:]
                if option == 'vendor-specific-information':
                    # Remove any 'garbage' characters and reformat string to
                    # expected format
                    for character in '\\<> \"\n':
                        string = string.replace(character, '')
                elif option == 'domain-name':
                    # Remove any whitespace characters from the end
                    string = string.strip('; \r\n\t\0\"')
                opt_strings.append(string)
    return opt_strings
