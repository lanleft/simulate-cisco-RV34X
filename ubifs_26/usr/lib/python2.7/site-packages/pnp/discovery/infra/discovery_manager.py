################################################################################
# Copyright (c) 2015-17 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Shaurin Desai <shaurdes@cisco.com>
################################################################################
"""The discovery manager module is the entry point for the PnP Discovery.

The discovery manager will orchestrate PnP Discovery according to the configured
Pnp Discovery policy. Discovery will exit if a profile configuration is already
in place, even if it is invalid.

Discovery Manager will run until a discovery mechanism is successful. It will
wait for a configurable time upon the failure of all discovery mechanisms. After
this retry wait time is over, the discovery manager will retry the discovery
mechanism sequence.

Notes:
    This file can be run standalone to perform PnP Discovery. It will be run in
    the same process as the PnP Agent, for now. This can change as the PnP Agent
    is enhanced to support multiple profiles.

Todo:
    * Move 'status' tracking logic to separate module
    * Set _discovery_enabled value based off value from pnp_config
    * Move 'static' profile check out from PnP Discovery to PnP Agent or Profile
      Manager
"""
import json
from logging import getLogger
from time import gmtime, sleep, strftime, time

import pnp.infra.utils.pnp_utils as pnp_utils
from pnp.discovery.infra.policy import DiscoveryPolicy
from pnp.infra.network.connection_client import ConnectionInfo
from pnp.infra.network.connection_manager import ConnectionManager
from pnp.infra.utils.pnp_file_paths import filepaths

# Optional platform dependent import. If unavailable, pnp will not notify
# platform of PnP Discovery success before handling Discovery result.
from pnp.discovery.infra.notify import notify_platform_discovery

logger = getLogger(__name__)


# Enhancement: should return current value in pnp_config
def _discovery_enabled():
    return True


def discovery_manager():
    """Runs through discovery mechanisms until one is successful.

    Returns:
        bool: True if valid PnP Profile is successfully stored OR if PnP Profile
            is already present. False if platform's own discovery mechanism is
            successful.

    """
    if not _discovery_enabled():
        logger.info("PnP Discovery is not enabled")
        return True
    # read discovery status log
    pnp_status_path = filepaths['data']['status']
    with open(pnp_status_path, 'r') as pnp_status_file:
        discovery_status = json.loads(pnp_status_file.read())
    # Check for existing PnP Profile
    if _validate_static_config():
        logger.debug("Discovery skipped upon existing profile configs presence")
        discovery_status['discovery']['discovery_method'] = "user"
        with open(pnp_status_path, 'w') as pnp_status_file:
            pnp_status_file.write(json.dumps(discovery_status))
        return True
    logger.info("Starting PnP Discovery")
    # load discovery policy
    discovery_policy = DiscoveryPolicy()
    attempt_num = 1
    while _discovery_enabled():
        # iterate through configured discovery mechanisms
        for method, protocol in discovery_policy.mechanisms:
            logger.debug("Discovery attempt #%s: mechanism: %s (%s)",
                         attempt_num, method.__name__, protocol)
            # Launch discovery mechanism using specified protocol
            discovery_result = method(protocol)
            if discovery_result:
                name = method.__name__
                logger.info('Discovery success using mechanism: %s (%s)', name,
                            protocol)
                notify_platform_discovery(name)
                # handle platform discovery success differently than PnP
                if protocol == 'platform':
                    return False
                if pnp_utils.profile_exists():
                    # Existing profile is not overwritten since its a
                    # successful redirection profile
                    updated_config = {'created_by': 'cco_discovery',
                                      'preferred_protocol': protocol}
                    pnp_utils.update_pnp_config(updated_config)
                else:
                    # save discovery information
                    l_time = strftime("%H:%M:%S %b %d", gmtime(time()))
                    discovery_status['discovery']['last_success_time'] = l_time
                    discovery_status['discovery']['discovery_method'] = name
                    with open(pnp_status_path, 'w') as pnp_status_file:
                        pnp_status_file.write(json.dumps(discovery_status))
                    discovery_result.update(created_by=name,
                                            preferred_protocol=protocol)
                    pnp_utils.update_pnp_config(discovery_result)
                    logger.debug("PnP config updated with Discovery profile")
                return True
            attempt_num += 1
        logger.debug("Discovery mechanisms exhausted; sleep before retry: %d "
                     "seconds", discovery_policy.retry_time)
        sleep(discovery_policy.retry_time)


def _validate_static_config():
    """Checks for an existing profile configuration and validates it.

    Returns:
        bool: True if profile already exists (valid or not), False otherwise.

    """
    pnp_cfg = pnp_utils.profile_exists()
    if pnp_cfg:
        static_cfg = ConnectionInfo(**pnp_cfg)
        if ConnectionManager(static_cfg).is_valid():
            logger.debug('Existing profile config found valid.')
        else:
            logger.debug('Existing profile config found NOT valid.')
        return True
    else:
        logger.debug('Existing profile config NOT found.')
        return False


if __name__ == '__main__':
    print discovery_manager()
