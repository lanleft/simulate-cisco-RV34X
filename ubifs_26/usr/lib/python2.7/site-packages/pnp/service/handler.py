################################################################################
# Copyright (c) 2015-17 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Shaurin Desai <shaurdes@cisco.com>
################################################################################
"""PnP Service handler

This module provides an interface to handle PnP Services. Users can list the
available PnP Services and load instances of these PnP Service classes.

Todo:
    * Refactor load_service to return a default PnPService instance upon failure
        to load service.

"""
import imp
import os
import pkgutil
from logging import getLogger

from pnp.infra.utils.pnp_constants import (PNP_INFRA_CDP, PNP_INFRA_SUDI,
                                           PNP_SERVICES_MASTER_LIST)
from pnp.service.api.pnp_service import PnPService
from pnp.service.services import __path__ as pnp_paths

# Platform-Dependent import. If not available, only pnp services will be used.
try:
    from pnp_platform.services import __path__ as platform_paths
except ImportError:
    platform_paths = []

logger = getLogger(__name__)

_pnp_services = []
_pnp_platform_services = []


def list_services(pnp_only=False):
    """Lists the available PnP Services.

    Args:
        pnp_only (bool, optional): If set to True, PnP Services will only be
            loaded from the pnp module

    Returns:
        list(str): List of PnP Services found in pnp and pnp_platform modules.

    """
    service_list = []
    # Compile list of services found in modules
    if not pnp_only:
        service_list.extend(_pnp_platform_services)
    service_list.extend(_pnp_services)
    # Prune services that are missing dependencies
    # Check Device-Auth dependencies
    try:
        import pnp_platform.infra.sudi as sudi_api
        if not hasattr(sudi_api, PNP_INFRA_SUDI):
            service_list.remove('device_auth')
    except ImportError:
        service_list.remove('device_auth')
   # Check CDP dependencies for tag service
    try:
        import pnp_platform.infra.cdp as cdp_api
        if not hasattr(cdp_api, PNP_INFRA_CDP):
            service_list.remove('tag')
    except ImportError:
        service_list.remove('tag')
    return service_list


def load_service(service_name, pnp_profile, pnp_only=False):
    """PnP Service factory method.

    Loads an instance of the provided service name and associates it with a PnP
    Profile. Preference is give to services provided by pnp_platform module.

    Args:
        service_name (str): Name of PnP Service to initialize.
        pnp_profile (Profile): PnP Profile instance that performs the service.
        pnp_only(bool, optional): If set to True, PnP Services will only be
            loaded from the pnp module.

    Returns:
        PnPService: Returns an initialized instance of the specified service.
        None: Error occurred when attempting to load the service.

    """
    # give priority to pnp_platform services
    if not pnp_only and service_name in _pnp_platform_services:
        platform_service = _load_service(service_name, pnp_profile,
                                         platform_paths[0])
        if platform_service:
            return platform_service
    if service_name in _pnp_services:
        return _load_service(service_name, pnp_profile, pnp_paths[0])
    return None


def _load_service(service_name, pnp_profile, service_module_path):
    service_mod = _load_service_module(service_module_path, service_name)
    if not service_mod:
        logger.error("Failed to load service module: %s", service_name)
        return None
    service_class = _get_subclass(service_mod)
    if not service_class:
        logger.error("Failed to locate PnPService subclass in %s module: %r",
                     service_name, service_mod)
        return None
    return service_class(service_name, pnp_profile)


def _load_service_module(services_path, service_name):
    # give preference to compiled module
    service_file = service_name + '.pyc'
    service_path = os.path.join(services_path, service_file)
    service_module = None
    if os.path.isfile(service_path):
        try:
            service_module = imp.load_compiled(service_name, service_path)
        except (ImportError, IOError):
            logger.exception("Failed to load compiled module %s from %s",
                             service_name, services_path)
    elif os.path.isfile(service_path[:-1]):
        try:
            service_module = imp.load_source(service_name, service_path[:-1])
        except (ImportError, IOError):
            logger.exception("Failed to load source module %s from %s",
                             service_name, services_path)
    return service_module


def _get_subclass(mod):
    for name in dir(mod):
        obj = getattr(mod, name)
        try:
            if issubclass(obj, PnPService) and name != "PnPService":
                return obj
        except TypeError:
            pass
    return None


# this function is called (bottom of file) when this module is imported
def _load_services():
    # pnp_platform services
    if platform_paths:
        platform_services = [os.path.abspath(platform_paths[0])]
        for _, service_name, is_pkg in pkgutil.walk_packages(platform_services):
            if not is_pkg and (service_name in PNP_SERVICES_MASTER_LIST):
                _pnp_platform_services.append(service_name)
    # pnp services
    pnp_services = [os.path.abspath(pnp_paths[0])]
    for _, service_name, is_pkg in pkgutil.walk_packages(pnp_services):
        if not is_pkg and (service_name in PNP_SERVICES_MASTER_LIST):
            _pnp_services.append(service_name)


_load_services()


if __name__ == '__main__':
    print list_services()
