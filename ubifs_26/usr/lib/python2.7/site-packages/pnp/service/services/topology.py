################################################################################
# Copyright (c) 2015-18 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Charuta Dusane <cdusane@cisco.com>
################################################################################
"""PnP Service: Topology

Implemented to satisfy to collect the neighbor information including UDI

"""
from pnp.infra.system.cdp import CDP
from pnp.service.api.pnp_service import PnPService


class TopologyInfoError(Exception):
    """Topology Info Error (inherits from Exception)"""
    pass


class Topology(PnPService):
    """PnP Service: Topology"""

    def run(self):
        """Get the result after process the request.
        Generates the Topology-Info Work-Response."""
        result = False
        try:
            result = self._get_cdp_neighbors_list()
        except TopologyInfoError as err:
            self.logger.debug(err)
        self.success = int(result)

    def _get_cdp_neighbors_list(self):
        """Populates CDP neighbor response.

                Modifies: self.response.

                Returns:
                    String: CDP information.

        """
        try:
            self.logger.debug('Getting neighbors cdp_neighbor_list')
            cdp_neighbor_list = CDP.get_cdp_neighbors()
            self.logger.debug(cdp_neighbor_list)
            cdp_neighbor_list_response = []
            for neighbor in cdp_neighbor_list:
                cdp_list_keys = ['element']
                cdp_neighbor_list_result = dict.fromkeys(cdp_list_keys, {})
                neighbor_local_keys = ['interface', 'shortInterface',
                                       'macAddress']
                neighbor_remote_keys = ['interface', 'shortInterface',
                                        'macAddress', 'deviceName',
                                        'platform', 'version', 'udi']
                neighbor_local = dict.fromkeys(neighbor_local_keys, '')
                neighbor_remote = dict.fromkeys(neighbor_remote_keys, '')
                # Local info
                for key in neighbor_local_keys:
                    if key in neighbor['local']:
                        neighbor_local[key] = neighbor['local'][key]
                # Remote info
                for key in neighbor_remote_keys:
                    if key in neighbor['remote']:
                        neighbor_remote[key] = neighbor['remote'][key]
                # Neighbor info
                cdp_neighbor_list_result['element']['local'] = neighbor_local
                cdp_neighbor_list_result['element']['remote'] = neighbor_remote
                cdp_neighbor_list_response.append(cdp_neighbor_list_result)
            self.response['topology'] = cdp_neighbor_list_response
            self.logger.debug('CDP info: ', cdp_neighbor_list_response)
        except Exception as err:
            err_msg = "CDP info request failure"
            self.logger.error(err_msg)
            self.set_error_info(code='TOPOLOGY_INTERNAL', msg=err_msg)
            raise TopologyInfoError(err)
        return True
