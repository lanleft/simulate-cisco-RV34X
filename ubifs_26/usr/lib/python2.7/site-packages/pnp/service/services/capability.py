################################################################################
# Copyright (c) 2015-18 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Shaurin Desai <shaurdes@cisco.com>
################################################################################
"""PnP Service: Capability

This service will list the supported PnP capabilities for a PnP device.

Todo:
    * Update code to support API-dependent capabilities
    * Update code to blacklist certain workaround capabilities (e.g. CLI-Config)

"""
from pnp.infra.utils.pnp_constants import PNP_INFRA_VBOND
from pnp.service.api.pnp_service import PnPService
from pnp.service.handler import list_services

# The following 2 lists keep track of capability & feature service that have
# no corresponding py file with the same name but are to be included.
# E.g. There is no pnp/service/cco-backoff but'cco-backoff' is to be included.
capabilities_bonus = []
features_bonus = ['cco-backoff', 'certificate-checksum']


class Capability(PnPService):
    """Capability service to return the supported PnP capabilities & features
    """

    def run(self):
        """Determine device's PnP capabilities"""
        capabilities, features = _supported_services()
        if not capabilities and not features:
            error_msg = "Failed to get any supported service & features"
            self.logger.error(error_msg)
            self.set_error_info(code='INTERNAL', msg=error_msg)
            self.success = False
        else:
            self.success = True
            if capabilities:
                self.response["supportedCapabilities"] = {
                    "capability": ['cisco:pnp:' + cap for cap in capabilities],
                    "@agent-type": "cisco:posix"
                }
            if features:
                self.response["supportedFeatures"] = {
                    "feature": ['cisco:pnp:' + feat for feat in features]
                }


def _supported_services():
    """This function returns the supported capabilities & features in Posix PnP.

    Returns:
         list(str), list(str): Two lists, each containing the list of supported
            capabilities/features.
    """
    capability = [service.replace('_', '-') for service in list_services()]
    feature = []
    for bonus in capabilities_bonus:
        capability.append(bonus)
    for bonus in features_bonus:
        feature.append(bonus)
    # Determine if vBond support is provided by platform
    try:
        import pnp_platform.infra.vbond as vbond_api
        if hasattr(vbond_api, PNP_INFRA_VBOND):
            feature.append('vbond-controller')
    except ImportError:
        pass
    return capability, feature
