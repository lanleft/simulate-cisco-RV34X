################################################################################
# Copyright (c) 2017 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Andrew Au <aau@cisco.com>
################################################################################
"""PnP's file utility functions
"""
from urllib2 import urlopen

from pnp.infra.network.security import load_csdl_ssl_context
from pnp.infra.utils.pnp_utils import parse_url, profile_exists


def write_data_to_file(data, dfile):
    """This function writes the given data into the given file. If the write
    operation generates any exception, the caller has to handle it, i.e.
    IOError and OSError.

    Prerequisite:
        The caller has to ensure that the given file should be writable.

    Args:
        data (str) - data string to write into the file
        dfile (str) - path to the data file to be written into
    """
    my_file = open(dfile, "w")
    my_file.write(data)
    my_file.close()


def read_from_remote_file(remote_path, size_limit, timeout=80):
    """This function reads data from a file on a remote file system specified
    by the remote path in the input argument. If the read operation raises
    any exception, the caller has to handle it, i.e.OSError, urllib2.URLError,
    urllib2.HTTPError, HttpBadStatusLine, socket_timeout.

    Args:
        remote_path (str): remote file path including the download
            scheme, addr and directory path, e.g. http://1.2.3.4/dir/script
        size_limit(int): file size limit in reading in bytes
        timeout (int): the timeout to wait for file download completion;
            default: 80 secs, the same def value in IOS

    Returns:
        data (str): data string if successfully read
        err (str): error msg if any; otherwise None
    """
    scheme, netloc, path = parse_url(remote_path) #pylint: disable=unused-variable
    if scheme == 'https':
        config = profile_exists()
        if not config:
            return None, "HTTPS failed"
        cafile = config.get('cafile')
        if not cafile:
            return None, "HTTPS failed"
        ctx = load_csdl_ssl_context(cafile)
        if not ctx:
            return None, "HTTPS failed"
        src_file = urlopen(remote_path, context=ctx, timeout=timeout)
    else:
        src_file = urlopen(remote_path, timeout=timeout)
    data = src_file.read(size_limit)
    src_file.close()
    return data, None
