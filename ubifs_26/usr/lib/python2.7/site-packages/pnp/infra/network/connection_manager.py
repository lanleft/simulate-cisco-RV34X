################################################################################
# Copyright (c) 2015-17 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Tai Pham <taipham@cisco.com>
################################################################################
"""Connection Manager

ConnectionManager forwards connection requests to the appropriate connection
client. It acts as a delegator for connection client delegates.

Todo:
    * Add connection clients for other transport or file download protocols

"""
from logging import getLogger

from pnp.infra.network.connection_client import ConnectionInfo
from pnp.infra.network.http_conn_client import HTTPConnClient


class ConnectionManager(object):
    """Connection manager handles and calls appropriate connection clients"""

    _conn_client = None

    logger = getLogger('pnp.infra.ConnectionManager')

    def __init__(self, conn_data):
        """Initializes ConnectionManager instance. Acts as a delegator for
        connection clients.

        Args:
            conn_data (ConnectionInfo): Connection attributes

        Raises:
            TypeError: conn_data is not of type 'ConnectionInfo'
            ValueError: Transport specified in conn_data is not supported.

        """
        if not isinstance(conn_data, ConnectionInfo):
            raise TypeError("Expected type 'ConnectionInfo', received %s" %
                            type(conn_data))
        if conn_data['transport'] in ('http', 'https'):
            self._conn_client = HTTPConnClient(conn_data)
        else:
            raise ValueError("Unsupported transport provided: %s" %
                             conn_data['transport'])

    def __getattr__(self, item):
        def wrapper(*args, **kwargs):
            """Delegation pattern implementation. Conn client is the delegate.
            """
            if hasattr(self._conn_client, item):
                attr = getattr(self._conn_client, item)
                if callable(attr):
                    return attr(*args, **kwargs)
                else:
                    return attr
            else:
                msg = "ConnectionManager delegate (%s) has no %s attribute"
                name = type(self._conn_client)
                err_msg = msg % (name, item)
                self.logger.debug(err_msg)
                raise AttributeError(err_msg)
        return wrapper
