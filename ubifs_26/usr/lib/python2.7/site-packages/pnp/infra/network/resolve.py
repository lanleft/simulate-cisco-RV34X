################################################################################
# Copyright (c) 2015-17 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Aashita Irani <aairani@cisco.com>
################################################################################
"""Timed URL Resolver

This module contains the network utility function 'timed_url_resolver' which can
be used to resolve host names, domain names, and fully qualified domain names
over a specified IP Version.

"""
import multiprocessing
import socket
from logging import getLogger

import pnp.infra.utils.pnp_constants as consts
from pnp.infra.network.vrf import VRF

logger = getLogger(__name__)


def timed_url_resolver(url, time_limit, ip_type=consts.PNP_ADDRTYPE_IPV4):
    """Returns ip address if url is resolved within specified time limit

    Args:
        url (str): FQDN to resolve
        time_limit (int): Max time limit to wait for the completion of the
            DNS resolution
        ip_type (str, optional): Preferred IP version to use for DNS resolution
            attempts. Possible values are 'ipv4', 'ipv6', or 'any'. Defaults to
            'ipv4'.

    Returns:
        list(str): List of IP Addresses that provided address resolves to. List
            is ordered by time taken to resolve. Empty list will be returned
            upon resolution failure.

    """
    def _pnp_getaddrinfo(myurl, queue, ipversion=socket.AF_UNSPEC):
        VRF.set_vrf()
        ret_addrs = socket.getaddrinfo(myurl, None, ipversion,
                                       socket.SOCK_DGRAM,
                                       socket.IPPROTO_IP, socket.AI_CANONNAME)
        for addr in ret_addrs:
            queue.put(addr[4][0])

    resolver = _pnp_getaddrinfo
    addr_queue = multiprocessing.Queue()
    if ip_type == consts.PNP_ADDRTYPE_IPV4:
        logger.debug("Spawn process to resolve name %s to an IPv4 addr", url)
        proc = multiprocessing.Process(target=resolver,
                                       args=(url, addr_queue, socket.AF_INET))
    elif ip_type == consts.PNP_ADDRTYPE_IPV6:
        logger.debug("Spawn process to resolve name %s to an IPv6 addr", url)
        proc = multiprocessing.Process(target=resolver,
                                       args=(url, addr_queue, socket.AF_INET6))
    else:
        logger.debug("Spawn process to resolve name %s to an IP addr", url)
        proc = multiprocessing.Process(target=resolver, args=(url, addr_queue))
    proc.start()
    proc.join(time_limit)
    # Proc is alive if resolution attempt did not finish
    if proc.is_alive():
        proc.terminate()
        return []
    # Proc exitcode is not 0 if resolution errors out (socket timeout)
    if proc.exitcode == 0:
        ip_addrs = []
        while not addr_queue.empty():
            ip_addrs.append(addr_queue.get())
        return ip_addrs
    return []
