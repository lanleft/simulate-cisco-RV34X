# pylint: disable=unused-argument, line-too-long
################################################################################
# Copyright (c) 2015-18 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Shaurin Desai <shaurdes@cisco.com>
################################################################################
"""PnP Infra API: CDP (Cisco Discovery Protocol)

This file serves as the CDP API signature.

This API is mandatory to implement for all platforms. Without this API
implementation in place, the PnP Agent will not be able to report information
on neighbor devices.

Note:
    CDP data can be requested by PnP Services (e.g. Topology, Tag, Device-Info)

"""
from pnp.infra.api.pnp_infra import PnPInfra
from pnp.infra.errors import SEVERITY_ERROR


class CDP(PnPInfra):
    """PnP Infra API: CDP

    Useful methods and attributes inherited from PnPInfra:
        * logger: Logger to be used for logging by PnP Infra API implementation.
        * set_error_info(): Method to be used by PnP Infra API implementation
            for reporting error/warning information.
    """


    @classmethod
    def get_cdp_neighbors(cls):
        """Gets the CDP neighbor information for each local interface. Most data
        can be retrieved from CDP Base TLVs. Some must be retrieved from specific
        CDP Application TLVs.

        Returns:
            list: List of CDP key-value pairs per local-remote interface pairing

            Expected format (all values are type<str>):
            [
                {
                    'local': {  # Local Interface
                        'interface': 'GigabitEthernet0/2',  # Full name
                        'shortInterface': 'Gi0/2',  # Short name
                        'macAddress': 'e05f.b98f.0582'  # MAC address
                    },
                    'remote': {  # Remote Interface
                        'interface': 'FastEthernet1/0/6',  # Full name
                        'shortInterface': 'Fe1/0/6',  # Short name
                        'macAddress': '001b.90ab.c888',  # MAC address
                        'deviceName': 'row83-114-out-sw',  # Device Name
                        'platform': 'cisco WS-C3750-48TS',  # Platform
                        'version': '''Cisco IOS Software, C3750 Software (C3750-IPBASEK9-M),
                                      Version 12.2(55)SE4, RELEASE SOFTWARE (fc1)
                                      Technical Support: http://www.cisco.com/techsupport
                                      Copyright (c) 1986-2011 by Cisco Systems, Inc.
                                      Compiled Tue 06-Sep-11 02:59 by prod_rel_team''',
                                      # Version
                        'udi': 'PID:CISCO3945-CHASSIS,VID:V02,SN:FTX1503AH3V'  # CDP app TLV PNP_UDI_TLV
                    }
                },
                { 'local': {...}, 'remote': {...}},
                ...
            ]

        """
        cls.logger.error("Failed to get CDP neighbors")
        cls.set_error_info(SEVERITY_ERROR, 'UNSUPPORTED',
                           "API implementation not found")
        return []

    @classmethod
    def set_cdp_app_tag(cls, tag_value, persist):
        """Sets the CDP app TLV for PnP (PNP_TAG_TLV 0x1006). This API method
        will be invoked by the Tag service.

        Args:
            tag_value (str): value to set in CDP app TLV for PNP_TAG_TLV
            persist (bool): If True, app tag value must persist across reboot

        Returns:
            bool: True, if set successfully; False, otherwise

        """
        cls.logger.error("Failed to set CDP PNP APP Tag Value")
        cls.set_error_info(SEVERITY_ERROR, 'UNSUPPORTED',
                           "API implementation not found")
        return False

    @classmethod
    def get_cdp_app_tag(cls):
        """Retrieves the CDP app TLV for PNP_APP_TLV. This API method is
        invoked by the Device-Info service and reported as "location".

        Returns:
            str: value of CDP app TLV for PNP_APP_TLV

        """
        cls.logger.error("Failed to get CDP Location Tag Value")
        cls.set_error_info(SEVERITY_ERROR, 'UNSUPPORTED',
                           "API implementation not found")
        return ''
