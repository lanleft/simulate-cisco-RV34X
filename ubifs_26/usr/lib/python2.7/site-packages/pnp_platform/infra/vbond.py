################################################################################
# Copyright (c) 2015-17 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Shaurin Desai <shaurdes@cisco.com>
################################################################################
"""PnP Infra: vBond

This file serves as the vBond API reference implementation. The vBond API is
used by the PnP Agent as an interface for communicating vBond details to the PnP
platform. This API is only necessary to implement for platforms which support
vBond connections through a client like vDaemon.

Note:
    POSIX PnP Reference Platform is not supported by vBond and does not run a
    vDaemon process, so this implementation only simulates the expected platform
    behavior.

"""
from pnp.infra.api.pnp_infra import PnPInfra
from pnp.infra.errors import SEVERITY_ERROR, VBOND_API_ERRORS


class VBond(PnPInfra):
    """PnP Infra API: vBond
    """

    @classmethod
    def update_vbond_config(cls, org, protocol, address, port, cert_path=''):
        """Pushes vBond controller connectivity details to platform.

        Args:
            org (str): Organization name for vBond controller
            protocol (str): Protocol for vBond controller (usually 'dtls')
            address (tuple(str, str)): Tuple of address-type (ipv4, ipv6, host)
                and address string
            port (int): Port number to use for vBond controller
            cert_path (str, optional): Path to the certificate used to establish
                TLS connection with vBond controller. Default is '' (no cert).

        Returns:
            bool: True if configuration pushed successfully, False otherwise.

        """
        # Control error condition simulation through cert_path parameter
        # This is a hack to enable error conditions
        if cert_path.split('/')[-1] in VBOND_API_ERRORS:
            _simulate_api_error(cert_path.split('/')[-1])
            return False
        cls.logger.info('Updating vBond config: Org: %s, Protocol: %s, '
                        'address: %s, port: %d, cert_path: %s', org, protocol,
                        address, port, cert_path)
        return True


def _simulate_api_error(error_code):
    """This function simulates different error conditions for this API call.

    Platforms should NOT include this function.

    Args:
        error_code (str): Error code to set

    """
    err_msg = "Simulated error code: %s" % error_code
    VBond.set_error_info(severity=SEVERITY_ERROR, code=error_code, msg=err_msg)
