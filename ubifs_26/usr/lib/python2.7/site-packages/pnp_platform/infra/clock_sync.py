################################################################################
# Copyright (c) 2015-17 by Cisco Systems, Inc.
# All rights reserved.
#
# Author: Shaurin Desai <shaurdes@cisco.com>
################################################################################
"""PnP Infra Clock Sync API implementation

This implementation leverages a non-standard python library (ntplib) to
communicate with the NTP Server. It also relies on the ctypes library to set the
system clock.

"""
import ctypes
import ctypes.util
import datetime
import time

import pnp_platform.utils.ntplib as ntplib

from pnp.infra.api.pnp_infra import PnPInfra


class ClockSync(PnPInfra):
    """Clock Sync implementation"""

    @classmethod
    def set_system_clock(cls, year, month, day, hour, minute, second):
        """Sets the system clock to the provided time.

        Args:
            year (int): year to set (min: 1993, max: 2035)
            month (str): month to set
            day (int): day to set (min: 1, max: 31)
            hour (int): hour to set (min: 0, max: 23)
            minute (int): minute to set (min: 0, max: 59)
            second (int): second to set (min: 0, max: 59)

        Returns:
            bool: True, if API call results in successful system clock setting.
                False, otherwise.
        """
        cls.logger.info("Set system clock to: year %d, month %s, day %d, "
                        "hour %d, minute %d, second %d", year, month, day,
                        hour, minute, second)
        months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug',
                  'Sept', 'Oct', 'Nov', 'Dec']
        month_index_map = {key: val for val, key in enumerate(months, start=1)}
        # Account for both Sep and Sept abbreviations
        month_index_map['Sep'] = month_index_map['Sept']
        time_tuple = (year, month_index_map[month], day, hour, minute, second)
        seconds = int(time.mktime(datetime.datetime(*time_tuple).timetuple()))
        seconds -= time.timezone;
        if not _set_time(seconds):
            cls.set_error_info(code='CLOCK_SYNC_SET_SYSTEM_CLOCK_FAILED',
                               msg="Failed to set the system clock")
            return False
        return True

    @classmethod
    def set_ntp_server(cls, ntp_server_addr):
        """Configures the provided NTP server address and perform NTP sync.

       Args:
            ntp_server_addr (str): NTP server address (IP Address or FQDN)

        Returns:
            bool: True, if NTP client is successfully configured and synced with
                an NTP Server. False, otherwise.

        """
        ntp_client = ntplib.NTPClient()
        try:
            ntp_response = ntp_client.request(ntp_server_addr)
        except ntplib.NTPException:
            err_msg = "NTP Client fail to reach provided NTP Server"
            cls.logger.exception(err_msg)
            cls.set_error_info(code='CLOCK_SYNC_NTP_SYNC_ERROR', msg=err_msg)
            return False
        seconds = int(ntp_response.tx_time)
        nanoseconds = int((ntp_response.tx_time % 1) * 1000000000)
        if not _set_time(seconds, nanoseconds):
            err_msg = ("Failed to set clock to NTP Server time (%d seconds %d "
                       "nanoseconds)" % (seconds, nanoseconds))
            cls.set_error_info(code='CLOCK_SYNC_NTP_SYNC_ERROR', msg=err_msg)
            return False
        return True


def _set_time(seconds, nanoseconds=0):
    """Calls system API to set the system clock.

    Args:
        seconds (int): number of seconds since epoch
        nanoseconds (int): nanoseconds after the seconds

    Returns:
        bool: True if successfully set the system clock, False otherwise.

    """
    class TimeStruct(ctypes.Structure):
        """timespec struct as defined in linux/time.h"""
        _fields_ = [("tv_sec", ctypes.c_long), ("tv_nsec", ctypes.c_long)]
        def __init__(self, seconds, nanoseconds):
            super(TimeStruct, self).__init__()
            self.tv_sec = seconds
            self.tv_nsec = nanoseconds
    librt = ctypes.CDLL(ctypes.util.find_library("rt"))
    ts = TimeStruct(seconds, nanoseconds)
    return not librt.clock_settime(0, ctypes.byref(ts))

